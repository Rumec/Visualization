{"version":3,"sources":["components/SparseGraphPseudocode.js","components/SparseGraphSubprocedure.js","components/SparseGraphDemoLoading.js","components/Chart1.js","App.js","reportWebVitals.js","index.js"],"names":["SparseGraphPseudocode","props","style","fontWeight","textIndent","backgroundColor","step","SparseGraphSubprocedurePseudocode","procedure","SparseGraphSubprocedure","SparseGraphDemoLoading","a","changeValue","generateGraph","onClick","NetworkGraph","sleepNow","sleepTime","Promise","r","setTimeout","visited","status","LESS_THAN_DELTA_EDGES","CYCLE_FOUND","MORE_THAN_DELTA_EDGES","color","state","sequenceToAdd","subprocedure","subprocedureStep","mainProcedureStep","timeoutInput","timeout","followerList","e_in","delta","inProgress","addingEdge","from","to","numberOfVertices","nodes","edges","handleChange","bind","addEdge","changeVertex","colorEdge","colorGraphToDefault","changeProgress","addVisitedVertex","clearVisitedVertices","setTimeoutFromInput","addVertexToEin","setEinOfVertex","setSubprocedureStep","cancelDemo","id","newValue","this","setState","successor","predecessor","oldEin","push","vertex","toBeSet","prevState","event","target","name","value","parseInt","actualAngle","nodesArr","i","level","label","toString","title","x","Math","sin","y","cos","PI","length","slice","oldEdges","width","oldFollowerList","levelIncrease","map","node","index","findIndex","item","splice","tmpEdge","forward","fromVertex","toVertex","console","log","testOrdering","backwardSearch","actualStatus","forwardSearch","fromLevel","toLevel","start","w","includes","F","pop","actual","sqrt","pow","min","window","alert","some","edge","insertEdge","mainProcedure","tmp","shift","className","marginLeft","list","out","renderTupleList","type","onChange","margin","graph","events","selectNode","selectVertex","dragStart","cancelDemoButton","options","layout","smooth","physics","enabled","height","SparseGraphDemoStep","manualAdding","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.efbd53f1.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SparseGraphPseudocode(props) {\n    return (\n        <div>\n                <h3>Hlavni procedura:</h3>\n\n            <div style={{fontWeight: \"bold\"}}>function VlozeniHrany(Graf, hrana)</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>v, w &#8592; hrana</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>B &#8592; &#8709;</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>dopredny &#8592; False</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> &#172;TestUsporadani(Graf, v, w) <a style={{fontWeight: \"bold\"}}>then</a></div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}>s &#8592; ZpetnyPruzkum(Graf, v, w, b)</div>\n            <div style={{textIndent: 30}}><a style={{fontWeight: \"bold\"}}>end if </a></div>\n            <div style={{textIndent: 30, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a>{\" s = CyklusNalezen \"}<a style={{fontWeight: \"bold\"}}>then</a></div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" True\"}</div>\n            <div style={{textIndent: 30, backgroundColor: (props.step === 6)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>else if</a> s = Neprekroceno &#8743; {\"Graf.k(v) < Graf.k(w) \"}<a style={{fontWeight: \"bold\"}}>then</a></div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}>Graf.k(w) &#8592; Graf.k(v)</div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}>Graf.in(w) &#8592; {}</div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}>dopredny &#8592; True</div>\n            <div style={{textIndent: 30, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>else if</a>{\" s = Prekroceno \"}<a style={{fontWeight: \"bold\"}}>then</a></div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>Graf.k(w) &#8592; Graf.k(v) + 1</div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>Graf.in(w) &#8592; &#8709;</div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>B &#8592; {\"{v}\"}</div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>dopredny &#8592; True</div>\n            <div style={{textIndent: 30, fontWeight: \"bold\"}}>{\"end if\"}</div>\n            <div style={{textIndent: 30, backgroundColor: (props.step === 10)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> dopredny &#8743; DoprednyPruzkum(Graf, w, B) <a style={{fontWeight: \"bold\"}}>then</a></div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 11)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" True\"}</div>\n            <div style={{textIndent: 30, fontWeight: \"bold\"}}>{\"end if\"}</div>\n            <div style={{textIndent: 15, fontWeight: \"bold\"}}>{\"end if\"}</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 12)?\"yellow\" : \"white\"}}>{\"PridaniHrany(Graf, v, w)\"}</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 12)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" False\"}</div>\n        </div>\n    )\n}\n\nexport default SparseGraphPseudocode;","import React from \"react\";\n\nfunction SparseGraphSubprocedurePseudocode(props) {\n    switch (props.procedure) {\n        case 1: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function TestUsporadani(Graf, v, w)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" Graf.k(v) < Graf.k(w)\"}</div>\n            </div>\n        );\n        case 2: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function ZpetnyPruzkum(Graf, start, w, B)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a>{\" start = w \"}<a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" CyklusNaleezen\"}</div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>end if</a></div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}>B &#8592; B &#8746; {\"{v}\"}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> Graf.in(start) = &#8709; &#8743; B.size() &#8805; Graf.delta <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" Prekroceno\"}</div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>end if</a></div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>foreach</a>{\" (predchudce, start)\"} &#8712; {\"Graf.in(start) \"}<a style={{fontWeight: \"bold\"}}>do</a></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> B.size() &#8805; Graf.delta <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" Prekroceno\"}</div>\n                <div style={{textIndent: 30, fontWeight: \"bold\"}}>{\"end if\"}</div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 10)?\"yellow\" : \"white\"}}>status &#8592; ZpetnyPruzkum(Graf, predchudce, w, B)</div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 11)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>switch</a>{\" status \"}<a style={{fontWeight: \"bold\"}}>do</a></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 12)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>case: </a>{\"CyklusNalezen: \"}<a style={{fontWeight: \"bold\"}}>return</a> CyklusNalezen</div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 13)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>case: </a>{\"Prekroceno: \"}<a style={{fontWeight: \"bold\"}}>return</a> Prekroceno</div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 14)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>default: </a>{}<a style={{fontWeight: \"bold\"}}>continue</a></div>\n                <div style={{textIndent: 30}}><a style={{fontWeight: \"bold\"}}>end switch</a>{}</div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>end for</a>{}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 15)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return </a>Neprekroceno</div>\n            </div>\n        );\n        case 3: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function DoprednyPruzkum(Graf, w, B)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>F &#8592; {\"{w}\"}</div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>while</a> F &#8800; &#8709; <a style={{fontWeight: \"bold\"}}>do</a></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}>aktualni &#8592; F.pop()</div>\n                <div style={{textIndent: 30}}><a style={{fontWeight: \"bold\"}}>foreach</a>{\" (a, n)\"} &#8712; {\"Graf.out(aktualni) \"}<a style={{fontWeight: \"bold\"}}>do</a></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> n &#8712; B <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" True\"}</div>\n                <div style={{textIndent: 45}}><a style={{fontWeight: \"bold\"}}>end if</a></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> Graf.k(a) = Graf.k(n) <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 6)?\"yellow\" : \"white\"}}>Graf.in(n) &#8592; Graf.in(n) &#8746; {\"{(a, n)}\"}</div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>else if</a> Graf.k(a) > Graf.k(n) <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>Graf.k(n) &#8592; Graf.k(a)</div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>Graf.in(n) &#8592; {\"{(a, n)}\"}</div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>F &#8592; F &#8746; {\"{n}\"}</div>\n                <div style={{textIndent: 45}}><a style={{fontWeight: \"bold\"}}>end if</a></div>\n                <div style={{textIndent: 30}}><a style={{fontWeight: \"bold\"}}>end for</a></div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>end while</a></div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return </a>False</div>\n            </div>\n        );\n        case 4: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function PridaniHrany(Graf, v, w)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>Graf.out(v) &#8592; Graf.out(v) &#8746; {\"{(v, w)}\"}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> Graf.k(v) = Graf.k(w) <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}>Graf.in(w) &#8592; Graf.in(w) &#8746; {\"{(v, w)}\"}</div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>end if</a></div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}>Graf.m &#8592; Graf.m + 1</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}>Graf.delta &#8592; min{\"{\"}m<sup>1/2</sup>, n<sup>2/3</sup>{\"}\"}</div>\n            </div>\n        );\n        default: return(<div> </div>)\n    }\n\n}\n\nfunction SparseGraphSubprocedure(props) {\n    return(\n        <div>\n            <h3>Podprocedura:</h3>\n            <SparseGraphSubprocedurePseudocode\n                procedure={props.procedure}\n                step={props.step}\n            />\n        </div>\n    )\n}\n\nexport default SparseGraphSubprocedure;","import React from \"react\";\n\nfunction SparseGraphDemoLoading(props) {\n    async function generator() {\n        await props.changeValue(\"sequenceToAdd\", [\n            [1, 2], [6, 7], [7, 8], [8, 9], [2, 3], [9, 10], [4, 5], [3, 4], [5, 6], [10, 1]\n        ]);\n        await props.changeValue(\"numberOfVertices\", 10);\n        await props.generateGraph();\n    }\n\n    return (\n        <button\n            onClick={generator}\n        >\n            Načíst demo\n        </button>\n    )\n}\n\nexport default SparseGraphDemoLoading;\n","import React from \"react\";\nimport Graph from \"react-graph-vis\";\nimport './graphStyle.css';\nimport SparseGraphPseudocode from \"./SparseGraphPseudocode\";\nimport SparseGraphSubprocedure from \"./SparseGraphSubprocedure\";\nimport SparseGraphDemoLoading from \"./SparseGraphDemoLoading\";\nimport SparseGraphDemoStep from \"./SparseGraphDemoStep\";\n//import DFS from \"./DFS\";\n//import SparseGraph from \"./SparseGraph\";\n\nconst RADIUS = 200;\n\nclass NetworkGraph extends React.Component {\n    constructor(props) {\n        super(props);\n        this.visited = [];\n        this.status = {\n            LESS_THAN_DELTA_EDGES: 0,\n            CYCLE_FOUND: 1,\n            MORE_THAN_DELTA_EDGES: 2\n        }\n\n        // inspired by: https://gist.github.com/mucar/3898821\n        this.color = ['#1AB399', '#F16FF1', '#F91AFF', '#06C6FF', '#4DB3FF',\n            '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\n            '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\n            '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\n            '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC',\n            '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680',\n            '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\n            '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3',\n            '#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\n            '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\n\n        this.state = {\n            sequenceToAdd: [],\n            subprocedure: 0,\n            subprocedureStep: 0,\n            mainProcedureStep: 0,\n            timeoutInput: 500,\n            timeout: 500,\n            followerList: {},\n\n            e_in: {}, // JSON of lists in incoming edges\n            delta: 0,\n\n            inProgress: false,\n            visited: [],\n            addingEdge: false,\n            from: 0,\n            to: 0,\n            numberOfVertices: 0,\n            nodes: [],\n            edges: []\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.generateGraph = this.generateGraph.bind(this);\n        this.addEdge = this.addEdge.bind(this);\n        this.changeVertex = this.changeVertex.bind(this);\n        this.colorEdge = this.colorEdge.bind(this);\n        this.colorGraphToDefault = this.colorGraphToDefault.bind(this);\n        this.changeProgress = this.changeProgress.bind(this);\n        this.addVisitedVertex = this.addVisitedVertex.bind(this);\n        this.clearVisitedVertices = this.clearVisitedVertices.bind(this);\n        this.setTimeoutFromInput = this.setTimeoutFromInput.bind(this);\n        this.addVertexToEin = this.addVertexToEin.bind(this);\n        this.setEinOfVertex = this.setEinOfVertex.bind(this);\n        this.setSubprocedureStep = this.setSubprocedureStep.bind(this);\n        this.changeValue = this.changeValue.bind(this);\n        this.cancelDemo = this.cancelDemo.bind(this);\n        this.step = this.step.bind(this);\n    }\n\n    async changeValue(id, newValue) {\n        await this.setState({\n            [id]: newValue\n        })\n    }\n\n    /**\n     * Sets step of the specified subprocedure for pseudocode animation\n     *\n     * @param subprocedure - Number of subprocedure we want to animate\n     * @param step - Current step in specified subprocedure\n     * @returns {Promise<void>}\n     */\n    async setSubprocedureStep(subprocedure, step) {\n        await this.setState({\n            subprocedure: subprocedure,\n            subprocedureStep: step\n        })\n    }\n\n    /**\n     * Adds a vertex to the e_in set\n     *\n     * @param successor - Vertex which e_in should be expanded\n     * @param predecessor - Vertex to be added\n     * @returns {Promise<void>}\n     */\n    async addVertexToEin(successor, predecessor) {\n        const oldEin = await this.state.e_in;\n        await oldEin[successor].push(predecessor);\n        await this.setState({\n            e_in: oldEin,\n        });\n    }\n\n    /**\n     * Sets the set of incoming edges to be the value given as parameter\n     *\n     * @param vertex - ID of vertex which e_in should be changed\n     * @param toBeSet - New value of e_in\n     * @returns {Promise<void>}\n     */\n    async setEinOfVertex(vertex, toBeSet) {\n        await this.setState(async prevState => {\n            prevState.e_in[vertex] = await toBeSet;\n            return prevState;\n        })\n    }\n\n    /**\n     * Handles changes of the controllers\n     *\n     * @param event - Object returned by event\n     */\n    handleChange(event) {\n        const {name, /*type, */ value/*, checked*/} = event.target;\n\n        //if (name === \"from\" || name === \"to\") {\n        this.setState({\n            [name]: parseInt(value)\n        })\n        //}\n\n        /*\n        (type === \"checkbox\") ? this.setState({[name]: checked})\n            : (name === \"addingEdge\") ? this.setState(prevState => {\n                return {\n                    addingEdge: !prevState.addingEdge\n                }\n            })\n            : this.setState({[name]: value});\n\n         */\n    }\n\n    /**\n     * Generates new graph, sets levels of all vertices to 1\n     *\n     * @returns {Promise<void>}\n     */\n    async generateGraph() {\n        let actualAngle = 0;\n        let nodesArr = [];\n        let followerList = {};\n        let e_in = {};\n        await this.setState({\n            //sequenceToAdd: [],\n            nodes: [],\n        })\n        for (let i = 1; i <= this.state.numberOfVertices; ++i) {\n            await nodesArr.push({\n                id: i,\n                level: 1,\n                label: i.toString() + \", 1\",\n                title: i.toString(),\n                color: this.color[0],\n                x: RADIUS * Math.sin(actualAngle),\n                y: RADIUS * Math.cos(actualAngle)\n            });\n            followerList[i] = [];\n            e_in[i] = []; // initializing list of incoming edges\n            actualAngle += await (2 * Math.PI) / (this.state.numberOfVertices);\n        }\n        await this.setState({\n            mainProcedureStep: 0,\n            followerList: followerList,\n            e_in: e_in,\n            nodes: nodesArr,\n            edges: [],\n            delta: 0,\n            from: 0,\n            to: 0,\n        });\n\n        /**\n         * Osetřit jinak!!!\n         */\n        if (this.state.sequenceToAdd.length !== 10) {\n            this.setState({\n                sequenceToAdd: []\n            })\n        }\n    }\n\n    /**\n     * Adds new edge to graph\n     *\n     * @returns {Promise<void>}\n     */\n    async addEdge() {\n        const from = parseInt(this.state.from);\n        const to = parseInt(this.state.to);\n\n        const oldEdges = await this.state.edges.slice();\n        await oldEdges.push({\n            from: from,\n            to: to,\n            color: \"black\",\n            width: 3\n        });\n\n        const oldFollowerList = await this.state.followerList;\n        await oldFollowerList[from].push(to);\n        await this.setState({\n            followerList: oldFollowerList,\n            edges: oldEdges,\n        });\n    }\n\n    DisplayAddingStatus() {\n        if (this.state.addingEdge && this.state.from === 0) {\n            return (\n                <p>Select starting vertex</p>\n            );\n        } else if (this.state.addingEdge && this.state.from !== 0) {\n            return (\n                <p>Select ending vertex</p>\n            );\n        } else {\n            return (<p>doing nothing</p>);\n        }\n    }\n\n    /**\n     * Action performed after node is selected via mouse click\n     *\n     * @param event - Event provided by mouse click\n     * @returns {Promise<void>}\n     */\n    async selectVertex(event) {\n        const {nodes} = event;\n\n        if (this.state.addingEdge && this.state.from !== 0) {\n            await this.setState({\n                to: nodes[0],\n                addingEdge: false\n            });\n            //await this.addEdge();\n        }\n        await this.setState({\n            from: nodes[0]\n        })\n\n    }\n\n    /**\n     * Stops program for specified amount of time\n     *\n     * @param sleepTime - Time to sleep\n     * @returns {Promise<unknown>}\n     */\n    sleepNow = (sleepTime) => new Promise((r) => setTimeout(r, sleepTime));\n\n    /**\n     * Changing parameters of vertex with given id to specified attributes\n     *\n     * @param id - ID of the node to be changed\n     * @param color - Color to be set\n     * @param levelIncrease - Value by which nodes level should be increased\n     * @returns {Promise<void>}\n     */\n    async changeVertex(id, color, levelIncrease) {\n        await this.setState(prevState => {\n            prevState.nodes = prevState.nodes.map(node => {\n                if (node.id === id) {\n                    return {\n                        id: id,\n                        level: node.level + levelIncrease,\n                        label: id.toString() + \", \" + (node.level + levelIncrease).toString(),\n                        title: node.title,\n                        color: color\n                    }\n                }\n                return node;\n            })\n            return {\n                nodes: prevState.nodes\n            };\n        })\n    }\n\n    /**\n     * Changes inProgress flag\n     */\n    changeProgress() {\n        this.setState(prevState => {\n            return {\n                inProgress: !prevState.inProgress\n            };\n        })\n    }\n\n    /**\n     * Adds vertex to set of visited vertices\n     *\n     * @param vertex - ID of vertex to be added\n     * @returns {Promise<void>}\n     */\n    async addVisitedVertex(vertex) {\n        await this.setState(prevState => {\n            prevState.visited.push(vertex);\n            return prevState;\n        })\n    }\n\n    /**\n     * Clears set of visited vertices\n     *\n     * @returns {Promise<void>}\n     */\n    async clearVisitedVertices() {\n        await this.setState({\n            visited: []\n        })\n    }\n\n    /**\n     * Colors given edge to red color (used for animation of searching through edges)\n     *\n     * @param from - Starting vertex of edge\n     * @param to - Ending vertex of edge\n     * @param color - Color of the edge\n     * @returns {Promise<void>}\n     */\n    async colorEdge(from, to, color) {\n        let oldEdges = await this.state.edges.slice();\n        const index = oldEdges.findIndex(item =>\n            item.from === from && item.to === to\n        );\n        await oldEdges.splice(index, 1);\n        await oldEdges.push({\n                from: from,\n                to: to,\n                color: color,\n                width: 3\n            }\n        )\n        await this.setState({\n            edges: oldEdges,\n        });\n    }\n\n    /**\n     * Colors whole graph back to default colors\n     *\n     * @returns {Promise<void>}\n     */\n    async colorGraphToDefault() {\n        /**\n         * Coloring all edges back to black\n         */\n        let oldEdges = await this.state.edges.slice();\n        for (let i = 0; i < oldEdges.length; ++i) {\n            let tmpEdge = {\n                from: oldEdges[0].from,\n                to: oldEdges[0].to,\n                color: \"black\",\n                width: 3\n            };\n\n            await oldEdges.splice(0, 1);\n            await oldEdges.push(tmpEdge);\n        }\n\n        await this.setState({\n            edges: oldEdges,\n        });\n\n        /**\n         * Coloring all vertices to default\n         */\n        await this.setState(prevState => {\n            prevState.nodes = prevState.nodes.map(node => {\n                node = {\n                    id: node.id,\n                    level: node.level,\n                    label: node.label,\n                    title: node.title,\n                    color: this.color[node.level - 1]\n                }\n                return node;\n            })\n            return {\n                nodes: prevState.nodes\n            };\n        })\n    }\n\n    /**\n     * Sets value of pause using value in number input\n     */\n    setTimeoutFromInput() {\n        this.setState({\n            timeout: this.state.timeoutInput\n        })\n    }\n\n\n    /**************************/\n\n    /* Sparse graph algorithm */\n\n    /**\n     * Main procedure of algorithm for sparse graphs\n     *\n     * @returns {Promise<boolean>}\n     */\n    async insertEdge() {\n        let forward = false;\n        let actualStatus;\n\n        let fromVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === this.state.from)],\n            toVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === this.state.to)];\n\n        await this.changeVertex(fromVertex.id, \"orange\", 0);\n        await this.changeVertex(toVertex.id, \"orange\", 0);\n\n        await this.changeValue(\"mainProcedureStep\", 1);\n        await this.sleepNow(this.state.timeout);\n\n        // await console.log(\"fromVertex:\", fromVertex, \"toVertex:\", toVertex);\n        console.log(\"delta:\", this.state.delta);\n\n\n        if (!(await this.testOrdering(this.state.from, this.state.to))) {\n\n            /**\n             * Opravit v implementaci a BP!!!\n             */\n            actualStatus = await this.backwardSearch(fromVertex.id, toVertex.id);\n\n            if (actualStatus === this.status.CYCLE_FOUND) {\n                await this.changeValue(\"mainProcedureStep\", 4);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 5);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 0);\n\n                return true;\n            } else if (actualStatus === this.status.LESS_THAN_DELTA_EDGES && (toVertex.level < fromVertex.level)) {\n\n                await this.changeValue(\"mainProcedureStep\", 6);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 7);\n                await this.sleepNow(this.state.timeout);\n\n                await this.changeVertex(toVertex.id, \"orange\", (fromVertex.level - toVertex.level));\n                await this.setEinOfVertex(toVertex.id, []);\n                forward = true;\n            } else if (actualStatus === this.status.MORE_THAN_DELTA_EDGES) {\n\n                await this.changeValue(\"mainProcedureStep\", 8);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 9);\n                await this.sleepNow(this.state.timeout);\n\n                await this.changeVertex(toVertex.id, \"orange\", ((fromVertex.level - toVertex.level) + 1));\n                await this.setEinOfVertex(toVertex.id, []);\n                await this.clearVisitedVertices();\n                await this.addVisitedVertex(fromVertex.id);\n                forward = true;\n            }\n\n            if (forward) {\n                await this.changeValue(\"mainProcedureStep\", 10);\n                await this.setSubprocedureStep(3, 0);\n                await this.sleepNow(this.state.timeout);\n\n                actualStatus = (await this.forwardSearch(this.state.to));\n                if (actualStatus) {\n                    await this.changeValue(\"mainProcedureStep\", 11);\n                    await this.sleepNow(this.state.timeout);\n                    await this.changeValue(\"mainProcedureStep\", 0);\n\n                    return true;\n                }\n            }\n        }\n\n        await this.colorGraphToDefault();\n\n        await this.changeValue(\"mainProcedureStep\", 12);\n        await this.sleepNow(this.state.timeout);\n\n        await this.addingEdge(fromVertex.id, toVertex.id);\n        await this.clearVisitedVertices();\n        await this.changeValue(\"mainProcedureStep\", 0);\n        await this.setSubprocedureStep(0, 0);\n        return false;\n    }\n\n    async testOrdering(from, to) {\n        let fromLevel = this.state.nodes[this.state.nodes.findIndex(node => node.id === from)].level,\n            toLevel = this.state.nodes[this.state.nodes.findIndex(node => node.id === to)].level;\n\n        await this.changeValue(\"mainProcedureStep\", 2);\n        await this.setSubprocedureStep(1, 0);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(1, 1);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(0, 0);\n        return (fromLevel < toLevel);\n    }\n\n    async backwardSearch(start, w) {\n        await this.changeValue(\"mainProcedureStep\", 3);\n        await this.setSubprocedureStep(2, 0);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(2, 1);\n        await this.sleepNow(this.state.timeout);\n\n        if (start === w) {\n            await this.setSubprocedureStep(2, 2);\n            await this.sleepNow(this.state.timeout);\n\n            return this.status.CYCLE_FOUND;\n        }\n        await this.setSubprocedureStep(2, 3);\n        await this.sleepNow(this.state.timeout);\n\n        await this.addVisitedVertex(start);\n\n        await this.setSubprocedureStep(2, 4);\n        await this.sleepNow(this.state.timeout);\n        if (this.state.e_in[start].length === 0 && this.state.visited.length >= this.state.delta + 1) {\n            await this.setSubprocedureStep(2, 5);\n            await this.sleepNow(this.state.timeout);\n\n            return this.status.MORE_THAN_DELTA_EDGES;\n        }\n\n        for (let i = 0; i < this.state.e_in[start].length; ++i) {\n            let predecessor = await this.state.e_in[start][i];\n\n            await this.setSubprocedureStep(2, 8);\n            await this.sleepNow(this.state.timeout);\n\n            if (this.state.visited.length >= this.state.delta + 1) {\n\n                await this.setSubprocedureStep(2, 9);\n                await this.sleepNow(this.state.timeout);\n                await this.setSubprocedureStep(0, 0);\n\n                return this.status.MORE_THAN_DELTA_EDGES;\n            }\n\n            if (this.state.visited.includes(predecessor)) {\n                continue;\n            }\n\n            // Coloring backward-searched edges\n            await this.colorEdge(predecessor, start, \"red\");\n            await this.setSubprocedureStep(2, 10);\n            await this.sleepNow(this.state.timeout);\n            let actualStatus = await this.backwardSearch(predecessor, w);\n\n            await this.setSubprocedureStep(2, 11);\n            await this.sleepNow(this.state.timeout);\n            if (actualStatus === this.status.CYCLE_FOUND || actualStatus === this.status.MORE_THAN_DELTA_EDGES) {\n                if (actualStatus === this.status.CYCLE_FOUND) {\n                    await this.setSubprocedureStep(2, 12);\n                    await this.sleepNow(this.state.timeout);\n                } else if (actualStatus === this.status.MORE_THAN_DELTA_EDGES) {\n                    await this.setSubprocedureStep(2, 13);\n                    await this.sleepNow(this.state.timeout);\n                }\n                await this.setSubprocedureStep(0, 0);\n                return actualStatus;\n            }\n            await this.setSubprocedureStep(2, 14);\n            await this.sleepNow(this.state.timeout);\n        }\n        await this.setSubprocedureStep(2, 15);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(0, 0);\n        return this.status.LESS_THAN_DELTA_EDGES;\n    }\n\n    async forwardSearch(w) {\n        // Simulation of set (JS set is not very smart)\n        await this.setSubprocedureStep(3, 1);\n        await this.sleepNow(this.state.timeout);\n\n        let F = [w];\n\n        while (F.length) {\n            await this.setSubprocedureStep(3, 2);\n            await this.sleepNow(this.state.timeout);\n\n            let actual = await F.pop();\n            actual = this.state.nodes[this.state.nodes.findIndex(node => node.id === actual)];\n\n            for (let i = 0; i < this.state.followerList[actual.id].length; ++i) {\n\n                let successor = await this.state.followerList[actual.id][i];\n                successor = this.state.nodes[this.state.nodes.findIndex(node => node.id === successor)];\n\n                // Animation\n                //console.log(\"Searching forward edge: (\", actual.id, \", \", successor.id, \")\");\n                await this.colorEdge(actual.id, successor.id, \"blue\");\n                await this.setSubprocedureStep(3, 3);\n                await this.sleepNow(this.state.timeout);\n\n                if (this.state.visited.includes(successor.id)) {\n                    await this.setSubprocedureStep(3, 4);\n                    await this.sleepNow(this.state.timeout);\n                    await this.setSubprocedureStep(0, 0);\n\n                    return true;\n                }\n\n                if (actual.level === successor.level) {\n                    await this.setSubprocedureStep(3, 5);\n                    await this.sleepNow(this.state.timeout);\n                    await this.setSubprocedureStep(3, 6);\n                    await this.sleepNow(this.state.timeout);\n\n                    await this.addVertexToEin(successor.id, actual.id);\n                } else if (actual.level > successor.level) {\n                    await this.setSubprocedureStep(3, 7);\n                    await this.sleepNow(this.state.timeout);\n                    await this.setSubprocedureStep(3, 8);\n                    await this.sleepNow(this.state.timeout);\n\n                    await this.changeVertex(successor.id, this.color[successor.level + (actual.level - successor.level) - 1], (actual.level - successor.level));\n                    await this.setEinOfVertex(successor.id, [actual.id]);\n                    await F.push(successor.id);\n                }\n            }\n        }\n        await this.setSubprocedureStep(3, 9);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(0, 0);\n\n        return false;\n    }\n\n    async addingEdge(from, to) {\n\n        from = this.state.nodes[this.state.nodes.findIndex(node => node.id === from)];\n        to = this.state.nodes[this.state.nodes.findIndex(node => node.id === to)];\n\n        await this.setSubprocedureStep(4, 1);\n        await this.sleepNow(this.state.timeout);\n\n        await this.addEdge();\n\n        if (from.level === to.level) {\n            await this.setSubprocedureStep(4, 2);\n            await this.sleepNow(this.state.timeout);\n            await this.setSubprocedureStep(4, 3);\n            await this.sleepNow(this.state.timeout);\n\n            await this.addVertexToEin(to.id, from.id);\n        }\n        await this.setSubprocedureStep(4, 4);\n        await this.sleepNow(this.state.timeout);\n\n        await this.changeValue(\"delta\", await Math.min(await Math.sqrt(this.state.edges.length),\n            await Math.pow(this.state.nodes.length, (2 / 3))));\n\n        await this.setSubprocedureStep(0, 0);\n    }\n\n    async mainProcedure() {\n        console.log(this.state.from, this.state.to)\n        if (!this.state.inProgress) {\n            const from = parseInt(this.state.from);\n            const to = parseInt(this.state.to);\n\n            await this.changeProgress();\n\n            if (to === from) {\n                window.alert(\"Smyčky jsou zakázány!\");\n            } else if (this.state.edges.some(edge => edge.from === from && edge.to === to)) {\n                window.alert(\"Hrana již existuje!\");\n            } else if (from > this.state.numberOfVertices || to > this.state.numberOfVertices ||\n                from < 1 || to < 1) {\n                await window.alert(\"Zvolené vrcholy se v grafu nenacházejí!\");\n            } else if (await this.insertEdge()) {\n                // Adding edge which creates cycle (green color)\n                await this.addEdge();\n                await this.colorEdge(this.state.from, this.state.to, \"green\");\n\n                await console.log(\"cycle\");\n                await window.alert(\"Zjištěn cyklus!\");\n            }\n            await this.changeProgress();\n        }\n\n    }\n\n    /**************************/\n\n    async step() {\n        await this.changeValue(\"from\", this.state.sequenceToAdd[0][0]);\n        await this.changeValue(\"to\", this.state.sequenceToAdd[0][1]);\n        /**\n         * This is actual algorithm\n         */\n        await this.mainProcedure();\n\n        let tmp = this.state.sequenceToAdd.slice();\n        tmp.shift();\n        await this.changeValue(\"sequenceToAdd\", tmp);\n    }\n\n    SparseGraphDemoStep() {\n        function renderTupleList(list) {\n            let out = \"\";\n            for (let i = 0; i < list.length; ++i) {\n                out += \"(\" + list[i][0] + \", \" + list[i][1] + \")\";\n                out += (i < list.length - 1) ? \", \" : \"\";\n            }\n            return out;\n        }\n\n        return (\n            <div\n                className={\"graphLayout\"}\n                style={{\n                    marginLeft: 10\n                }}\n            >\n                <div>\n                    <p>Sekvence hran k vložení: {renderTupleList(this.state.sequenceToAdd)}</p>\n                    <p>Přidávám hranu z {this.state.from} do {this.state.to}</p>\n                    <br/>\n                    <button\n                        onClick={this.step}\n                    >\n                        Přidat hranu ze sekvence\n                    </button>\n                    <br/><br/>\n                    <label>\n                        <input\n                            name={\"timeoutInput\"}\n                            type={\"number\"}\n                            value={this.state.timeoutInput}\n                            onChange={this.handleChange}\n                        />\n                        Délka kroku\n                    </label>\n                    <button\n                        onClick={this.setTimeoutFromInput}\n                    >\n                        Nastav délku kroku\n                    </button>\n                </div>\n                <div>\n                    <h2 style={{margin: 40}}>Delta= {this.state.delta}</h2>\n                </div>\n            </div>\n        )\n    }\n\n    async cancelDemo() {\n        await this.changeValue(\"sequenceToAdd\", []);\n        await this.changeValue(\"numberOfVertices\", 0);\n        await this.setSubprocedureStep(0, 0);\n        await this.generateGraph();\n        //await console.log(this.state.sequenceToAdd);\n    }\n\n    cancelDemoButton() {\n        return (\n            <button\n                onClick={(!this.state.inProgress)? this.cancelDemo : () => {}}\n            >\n                Zruš demo\n            </button>\n        )\n    }\n\n    manualAdding() {\n        return (\n            <div\n                className={\"graphLayout\"}\n                style={{\n                    marginLeft: 10\n                }}\n            >\n                <div>\n                    <p>Přidávám hranu z {this.state.from} do {this.state.to}</p>\n                    <br/>\n\n                    <div>\n                        <label>\n                            <input\n                                name={\"from\"}\n                                type={\"number\"}\n                                value={this.state.from}\n                                onChange={(!this.state.inProgress) ? this.handleChange : () => {\n                                }}\n                            />\n                            Výchozí vrchol\n                        </label>\n\n                        <label>\n                            <input\n                                name={\"to\"}\n                                type={\"number\"}\n                                value={this.state.to}\n                                onChange={(!this.state.inProgress) ? this.handleChange : () => {\n                                }}\n                            />\n                            Cílový vrchol\n                        </label>\n\n                        <button\n                            onClick={() => {\n                                this.mainProcedure();\n                            }}\n                        >\n                            Vlož hranu\n                        </button>\n                    </div>\n                    <br/>\n                    <label>\n                        <input\n                            name={\"timeoutInput\"}\n                            type={\"number\"}\n                            value={this.state.timeoutInput}\n                            onChange={this.handleChange}\n                        />\n                        Délka kroku\n                    </label>\n                    <button\n                        onClick={this.setTimeoutFromInput}\n                    >\n                        Nastav délku kroku\n                    </button>\n                </div>\n                <div>\n                    <h2 style={{margin: 40}}>Delta= {this.state.delta}</h2>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        const graph = {nodes: this.state.nodes, edges: this.state.edges};\n\n        const options = {\n            layout: {\n                //hierarchical: true\n            },\n            edges: {\n                color: \"#000000\",\n                smooth: {type: \"curvedCCW\"}\n            },\n            physics: {\n                enabled: false\n            },\n            height: \"500px\",\n        };\n\n        const events = {\n            // arrow function can access scope of whole component class\n            selectNode: async (event) => {\n                await this.selectVertex(event)\n            },\n\n            dragStart: async (event) => {\n                await this.selectVertex(event)\n            }\n        };\n        return (\n            <div>\n                <div\n                    className={\"topPanel\"}\n                >\n                    <div\n                        className={\"graphBox\"}\n                    >\n                        <text style={{\n                            fontWeight: \"bold\"\n                        }}>Počet vrcholů:\n                        </text>\n                        <input\n                            name={\"numberOfVertices\"}\n                            type={\"number\"}\n                            value={this.state.numberOfVertices}\n                            onChange={this.handleChange}\n                        />\n                        <button\n                            onClick={(!this.state.inProgress) ? this.generateGraph : () => {\n                            }}\n                        >\n                            Generuj graf\n                        </button>\n                    </div>\n                    <div\n                        className={\"pseudoCode\"}\n                    >\n                        <SparseGraphDemoLoading\n                            state={this.state}\n                            changeValue={this.changeValue}\n                            generateGraph={this.generateGraph}\n                        />\n                        {(this.state.sequenceToAdd.length !== 0 && !this.state.inProgress) ? this.cancelDemoButton() : () => {\n                        }}\n                    </div>\n                </div>\n                <hr/>\n                <div\n                    className={\"graphLayout\"}\n                >\n                    <div\n                        className={\"graphBox\"}\n                    >\n                        <Graph\n                            graph={graph}\n                            options={options}\n                            events={events}\n                        />\n                    </div>\n\n                    <div\n                        className={\"pseudoCode\"}\n                    >\n                        <SparseGraphPseudocode step={this.state.mainProcedureStep}/>\n                    </div>\n\n                    <div\n                        className={\"procedure\"}\n                    >\n                        <SparseGraphSubprocedure\n                            procedure={this.state.subprocedure}\n                            step={this.state.subprocedureStep}\n                        />\n                    </div>\n                </div>\n                <hr/>\n                {(this.state.sequenceToAdd.length !== 0) ?\n                    this.SparseGraphDemoStep()\n                    : this.manualAdding()}\n            </div>\n\n        )\n    }\n}\n\nexport default NetworkGraph;\n\n\n/*\n                <DFS\n                    state={this.state}\n                    changeProgress={this.changeProgress}\n                    colorGraphToDefault={this.colorGraphToDefault}\n                    sleepNow={this.sleepNow}\n                    visited={this.visited}\n                    colorEdgeToRed={this.colorEdgeToRed}\n                    changeVertex={this.changeVertex}\n                    addVisitedVertices={this.addVisitedVertex}\n                    clearVisitedVertices={this.clearVisitedVertices}\n                />\n\n                <button\n                    name={\"addingEdge\"}\n                    onClick={(!this.state.inProgress) ? this.handleChange : () => {\n                    }}\n                >\n                    Add edge with mouse\n                </button>\n\n                {this.DisplayAddingStatus()}\n\n                <button\n                    name={\"addingEdge\"}\n                    onClick={(!this.state.inProgress) ? this.handleChange : () => {\n                    }}\n                >\n                    Add edge with mouse\n                </button>\n\n                 <button\n                    onClick={(!this.state.inProgress) ? this.addEdge : () => {\n                    }}\n                >\n                    Add edge\n                </button>\n\n\n\n                <SparseGraph\n                    state={this.state}\n                    sleepNow={this.sleepNow}\n                    handleChange={this.handleChange}\n                    colorGraphToDefault={this.colorGraphToDefault}\n                    colorEdgeToRed={this.colorEdgeToRed}\n                    changeProgress={this.changeProgress}\n                    changeVertex={this.changeVertex}\n                    addVisitedVertex={this.addVisitedVertex}\n                    clearVisitedVertices={this.clearVisitedVertices}\n                    addVertexToEin={this.addVertexToEin}\n                    setEinOfVertex={this.setEinOfVertex}\n                    addEdge={this.addEdge}\n                    incrementM={this.incrementM}\n                    setDelta={this.setDelta}\n                />\n */","import React from 'react';\nimport './App.css';\nimport NetworkGraph from \"./components/Chart1\";\n\n// NOTE: CSS styling using 'className' needs to be in react elements, not components\n// NOTE: each time I write a method using setState(), I need to bind it to the class inside constructor!!\n//          like this: this.handleIncreaseClick = this.handleIncreaseClick.bind(this);\n\n\n// NOTE: Formik library - complete forms for React\n\nfunction App(props) {\n    return(\n        <div className={\"App\"}>\n            <header className={\"App-header\"}>\n                <NetworkGraph />\n            </header>\n        </div>\n    )\n}\n\nexport default App;\n\n/*\n    class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            isFriendly: false,\n            gender: \"\",\n            favouriteColor: \"Red\"\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        // To avoid some nasty bugs we use this\n        const {type, checked, name, value} = event.target;\n        // If I want to use string from variable as a key, I need to wrap it in square brackets\n        (type === \"checkbox\") ? this.setState({[name]: checked}) : this.setState({[name]: value});\n    }\n\n    render() {\n        return (\n            <form className=\"forms\">\n                <input\n                    type=\"text\"\n                    value={this.state.firstName}\n                    name=\"firstName\"\n                    placeholder=\"First Name\"\n                    onChange={this.handleChange}\n                />\n                <input\n                    type=\"text\"\n                    value={this.state.lastName}\n                    name=\"lastName\"\n                    placeholder=\"Last Name\"\n                    onChange={this.handleChange}\n                />\n                <textarea\n                    className=\"inputWindow\"\n                    placeholder=\"Some placeholder\"\n                    onChange={this.handleChange}\n                />\n\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        name={\"isFriendly\"}\n                        checked={this.state.isFriendly}\n                        onChange={this.handleChange}\n                    />\n                    Is friendly?\n                </label>\n\n                <br/>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name={\"gender\"}\n                        value={\"male\"}\n                        checked={this.state.gender === \"male\"}\n                        onChange={this.handleChange}\n                    />\n                    male\n                </label>\n                <br/>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name={\"gender\"}\n                        value={\"female\"}\n                        checked={this.state.gender === \"female\"}\n                        onChange={this.handleChange}\n                    />\n                    female\n                </label>\n\n                <select\n                    value={this.state.favouriteColor}\n                    name={\"favouriteColor\"}\n                    onChange={this.handleChange}\n                >\n                    <option value={\"Red\"}>Red</option>\n                    <option value={\"Gay\"}>Gay</option>\n                    <option value={\"Green\"}>Green</option>\n                </select>\n\n                <h2>{this.state.favouriteColor}</h2>\n            </form>\n        )\n    }\n}\n */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Enables using JSX\n// NOTE: Wherewer we are using JSX, we need to import this\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Importing an external file\n//import MyInfo from \"./components/MyInfo\";\n\n// We can wrap JSX inside a Component (function), inside JSX we can input this function as <SomeFunction/>\n// NOTE: Each function can return only 1 JSX element! (possible workaround is to wrap it into <div> block)\n\n\n// The first argument is \"what do I want to render\", second tells \"where I want it to render\"\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}