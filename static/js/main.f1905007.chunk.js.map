{"version":3,"sources":["components/SparseGraphPseudocode.js","components/SparseGraphSubprocedure.js","components/GraphDemoLoading.js","components/DenseGraphPseudocode.js","components/DenseGraphSubprocedure.js","components/NetworkGraph.js","App.js","reportWebVitals.js","index.js"],"names":["SparseGraphPseudocode","props","style","fontWeight","fontStyle","textIndent","backgroundColor","step","SparseGraphSubprocedurePseudocode","procedure","SparseGraphSubprocedure","GraphDemoLoading","a","state","graphType","changeValue","generateGraph","onClick","inProgress","DenseGraphPseudocode","DenseGraphSubprocedurePseudocode","DenseGraphSubprocedure","NetworkGraph","sleepNow","sleepTime","Promise","r","setTimeout","visited","status","LESS_THAN_DELTA_EDGES","CYCLE_FOUND","MORE_THAN_DELTA_EDGES","color","sequenceToAdd","subprocedure","subprocedureStep","mainProcedureStep","timeoutInput","timeout","followerList","e_in","delta","addingEdge","from","to","numberOfVertices","nodes","edges","b","c","handleChange","bind","addEdge","changeVertex","changeEdge","colorGraphToDefault","changeProgress","addVisitedVertex","clearVisitedVertices","setTimeoutFromInput","addVertexToEin","setEinOfVertex","setSubprocedureStep","cancelDemo","handleDropdownChange","id","newValue","this","setState","successor","predecessor","oldEin","push","vertex","toBeSet","prevState","event","target","name","value","parseInt","actualAngle","nodesArr","bArr","cArr","i","bTmp","cTmp","j","level","inDegree","label","toString","title","x","Math","sin","y","cos","PI","length","k_out","slice","oldEdges","width","font","background","oldFollowerList","levelIncrease","degreeIncrease","map","node","newKOut","index","findIndex","item","edgeKOut","splice","tmpEdge","forward","fromVertex","toVertex","testOrdering","backwardSearch","actualStatus","forwardSearch","fromLevel","toLevel","start","w","includes","F","pop","actual","sqrt","pow","min","floor","log2","oldB","oldC","T","currentEdge","traversalStep","v","newColor","max","edgesToBeTraversed","filter","edge","e","edgeColor","window","alert","some","insertEdgeSparse","console","log","insertEdgeDense","mainProcedure","tmp","shift","className","list","out","renderTupleList","type","onChange","graph","cancelDemoButton","options","layout","hierarchical","smooth","physics","enabled","DemoStep","manualAdding","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1905007.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SparseGraphPseudocode(props) {\n    return (\n        <div>\n                <h3>Hlavní funkce:</h3>\n\n            <div style={{fontWeight: \"bold\"}}>function VlozeniHrany(<span style={{fontStyle: \"italic\",}}>v, w</span>)</div>\n            <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>B &#8592; &#8709;</div>\n            <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>dopredny &#8592; False</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span> &#172;TestUsporadani(<span style={{fontStyle: \"italic\",}}>v, w</span>) <span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}><span style={{fontStyle: \"italic\",}}>s</span> &#8592; ZpetnyPruzkum(<span style={{fontStyle: \"italic\",}}>v, w, B</span>)</div>\n            <div style={{textIndent: 30, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if </span><span style={{fontStyle: \"italic\",}}>s = CyklusNalezen </span><span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" True\"}</span></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 6)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>else if</span><span style={{fontStyle: \"italic\",}}> s = Neprekroceno &#8743; {\"k(v) < k(w) \"}</span><span style={{fontWeight: \"bold\"}}>then</span></div>\n            <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}>k(w) &#8592; k(v)</div>\n            <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}>in(w) &#8592; &#8709;</div>\n            <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}>dopredny &#8592; True</div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>else if</span><span style={{fontStyle: \"italic\",}}>{\" s = Prekroceno \"}</span><span style={{fontWeight: \"bold\"}}>then</span></div>\n            <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>k(w) &#8592; k(v) + 1</div>\n            <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>in(w) &#8592; &#8709;</div>\n            <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>B &#8592; {\"{v}\"}</div>\n            <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>dopredny &#8592; True</div>\n            <div style={{textIndent: 30, fontWeight: \"bold\"}}>{\"end if\"}</div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 10)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span><span style={{fontStyle: \"italic\",}}> dopredny </span> &#8743; DoprednyPruzkum(<span style={{fontStyle: \"italic\",}}>w, B</span>) <span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 11)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" True\"}</span></div>\n            <div style={{textIndent: 30, fontWeight: \"bold\"}}>{\"end if\"}</div>\n            <div style={{textIndent: 15, fontWeight: \"bold\"}}>{\"end if\"}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 12)?\"yellow\" : \"white\"}}>PridaniHrany(<span style={{fontStyle: \"italic\",}}>v, w</span>)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 13)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" False\"}</span></div>\n        </div>\n    )\n}\n\nexport default SparseGraphPseudocode;","import React from \"react\";\n\nfunction SparseGraphSubprocedurePseudocode(props) {\n    switch (props.procedure) {\n        case 1: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function TestUsporadani(<span style={{fontStyle: \"italic\",}}>v, w</span>)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" k(v) < k(w)\"}</span></div>\n            </div>\n        );\n        case 2: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function ZpetnyPruzkum(<span style={{fontStyle: \"italic\",}}>start, w, B</span>)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span><span style={{fontStyle: \"italic\",}}>{\" start = w \"}</span><span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" CyklusNaleezen\"}</span></div>\n                <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>end if</span></div>\n                <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}>B &#8592; B &#8746; {\"{v}\"}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span><span style={{fontStyle: \"italic\",}}> in(start) = &#8709; &#8743; size(B) &#8805; &#916; + 1 </span><span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" Prekroceno\"}</span></div>\n                <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>end if</span></div>\n                <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>foreach</span><span style={{fontStyle: \"italic\",}}>{\" (predchudce, start)\"} &#8712; {\"in(start) \"}</span><span style={{fontWeight: \"bold\"}}>do</span></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span><span style={{fontStyle: \"italic\",}}> size(B) &#8805; &#916; +1 </span><span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" Prekroceno\"}</span></div>\n                <div style={{textIndent: 30, fontWeight: \"bold\"}}>{\"end if\"}</div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 10)?\"yellow\" : \"white\"}}><span style={{fontStyle: \"italic\",}}>status &#8592; ZpetnyPruzkum(predchudce, w, B)</span></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 11)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>switch</span><span style={{fontStyle: \"italic\",}}>{\" status \"}</span><span style={{fontWeight: \"bold\"}}>do</span></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 12)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>case: </span><span style={{fontStyle: \"italic\",}}>{\"CyklusNalezen: \"}</span><span style={{fontWeight: \"bold\"}}>return</span> <span style={{fontStyle: \"italic\",}}>CyklusNalezen</span></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 13)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>case: </span><span style={{fontStyle: \"italic\",}}>{\"Prekroceno: \"}</span><span style={{fontWeight: \"bold\"}}>return</span> <span style={{fontStyle: \"italic\",}}>Prekroceno</span></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 14)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>default: </span>{}<span style={{fontWeight: \"bold\"}}>continue</span></div>\n                <div style={{textIndent: 30}}><span style={{fontWeight: \"bold\"}}>end switch</span>{}</div>\n                <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>end for</span>{}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 15)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return </span><span style={{fontStyle: \"italic\",}}>Neprekroceno</span></div>\n            </div>\n        );\n        case 3: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function DoprednyPruzkum(<span style={{fontStyle: \"italic\",}}>w, B</span>)</div>\n                <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>F &#8592; {\"{out(w)}\"}</div>\n                <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>while</span><span style={{fontStyle: \"italic\",}}> F &#8800; &#8709; </span><span style={{fontWeight: \"bold\"}}>do</span></div>\n                <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}>(x, y) &#8592; pop(F)</div>\n                <div style={{textIndent: 30}}><span style={{fontWeight: \"bold\"}}>foreach</span><span style={{fontStyle: \"italic\",}}>{\" (a, n)\"} &#8712; {\"out(y) \"}</span><span style={{fontWeight: \"bold\"}}>do</span></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span><span style={{fontStyle: \"italic\",}}> n &#8712; B </span><span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" True\"}</span></div>\n                <div style={{textIndent: 45}}><span style={{fontWeight: \"bold\"}}>end if</span></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span><span style={{fontStyle: \"italic\",}}> k(a) = k(n) </span><span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 60,fontStyle: \"italic\", backgroundColor: (props.step === 6)?\"yellow\" : \"white\"}}>in(n) &#8592; in(n) &#8746; {\"{(a, n)}\"}</div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>else if</span><span style={{fontStyle: \"italic\",}}> k(a) > k(n) </span><span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 60, fontStyle: \"italic\", backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>k(n) &#8592; k(a)</div>\n                <div style={{textIndent: 60, fontStyle: \"italic\", backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>in(n) &#8592; {\"{(a, n)}\"}</div>\n                <div style={{textIndent: 60, fontStyle: \"italic\", backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>F &#8592; F &#8746; {\"{out(n)}\"}</div>\n                <div style={{textIndent: 45}}><span style={{fontWeight: \"bold\"}}>end if</span></div>\n                <div style={{textIndent: 30}}><span style={{fontWeight: \"bold\"}}>end for</span></div>\n                <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>end while</span></div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return </span><span style={{fontStyle: \"italic\",}}>False</span></div>\n            </div>\n        );\n        case 4: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function PridaniHrany(<span style={{fontStyle: \"italic\",}}>v, w</span>)</div>\n                <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>out(v) &#8592; out(v) &#8746; {\"{(v, w)}\"}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span> <span style={{fontStyle: \"italic\",}}>k(v) = k(w)</span> <span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}>in(w) &#8592; in(w) &#8746; {\"{(v, w)}\"}</div>\n                <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>end if</span></div>\n                <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}>m &#8592; m + 1</div>\n                <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}>&#916; &#8592; min{\"{\"}m<sup>1/2</sup>, n<sup>2/3</sup>{\"}\"}</div>\n            </div>\n        );\n        default: return(<div> </div>)\n    }\n\n}\n\nfunction SparseGraphSubprocedure(props) {\n    return(\n        <div>\n            <h3>Dílčí funkce:</h3>\n            <SparseGraphSubprocedurePseudocode\n                procedure={props.procedure}\n                step={props.step}\n            />\n        </div>\n    )\n}\n\nexport default SparseGraphSubprocedure;","import React from \"react\";\n\nfunction GraphDemoLoading(props) {\n    async function generator() {\n        if (props.state.graphType === \"sparse\") {\n            await props.changeValue(\"sequenceToAdd\", [\n                [1, 2], [6, 7], [7, 8], [8, 9], [2, 3], [9, 10], [4, 5], [3, 4], [5, 6], [10, 1]\n            ]);\n            await props.changeValue(\"numberOfVertices\", 10);\n        } else {\n            await props.changeValue(\"sequenceToAdd\", [\n                [1, 2], [1, 4], [3, 4], [2, 3], [5, 6], [5, 7], [6, 7], [4, 5], [1, 3], [7, 4]\n            ]);\n            await props.changeValue(\"numberOfVertices\", 7);\n        }\n        await props.generateGraph();\n    }\n\n    return (\n        <button\n            onClick={props.state.inProgress? () => {} : generator}\n        >\n            Načíst demo\n        </button>\n    )\n}\n\nexport default GraphDemoLoading;\n","import React from \"react\";\n\nfunction DenseGraphPseudocode(props) {\n    return (\n        <div>\n                <h3>Hlavní funkce:</h3>\n\n                <div style={{fontWeight: \"bold\"}}>function VlozeniHrany(<span style={{fontStyle: \"italic\",}}>v, w</span>)</div>\n            <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>d(w) &#8592; d(w) + 1</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span> <span style={{fontStyle: \"italic\",}}>{\"k(v) < k(w)\"}</span> <span style={{fontWeight: \"bold\"}}>then</span></div>\n            <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}>j &#8592; &#8970;log<sub>2</sub>(min{\"{k(w) - k(v), d(w)}\"})&#8971; </div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span> <span style={{fontStyle: \"italic\",}}>d(w) = 2<sup>j</sup></span> <span style={{fontWeight: \"bold\"}}>then</span></div>\n            <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}>b(j, w) &#8592; k(w)</div>\n            <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}>c(j, w) &#8592; 0</div>\n            <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}>c(j - 1, w) &#8592; 0</div>\n            <div style={{textIndent: 30}}><span style={{fontWeight: \"bold\"}}>end if </span></div>\n            <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 6)?\"yellow\" : \"white\"}}>k<sub>out</sub>(v, w) &#8592; k(w)</div>\n            <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}>insert((v, w), out(v))</div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" False\"}</span></div>\n            <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>end if </span></div>\n            <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>T &#8592; {\"{(v, w)}\"}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 10)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>while</span><span style={{fontStyle: \"italic\",}}> T &#8800; &#8709; </span><span style={{fontWeight: \"bold\"}}>do</span></div>\n            <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 10)?\"yellow\" : \"white\"}}>(x, y) &#8592; pop(T) </div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 11)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span> PruchodHranou(<span style={{fontStyle: \"italic\",}}>x, y, T, v</span>) <span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 12)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" True\"}</span></div>\n            <div style={{textIndent: 30}}><span style={{fontWeight: \"bold\"}}>end if </span></div>\n            <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>end while </span></div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 13)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return</span><span style={{fontStyle: \"italic\",}}>{\" False\"}</span></div>\n        </div>\n    )\n}\n\nexport default DenseGraphPseudocode;","import React from \"react\";\n\nfunction DenseGraphSubprocedurePseudocode(props) {\n    if (props.procedure !== 0) {\n        return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function PruchodHranou(<span style={{fontStyle: \"italic\",}}>x, y, T, v</span>)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span> <span style={{fontStyle: \"italic\",}}>y = v</span> <span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return </span><span style={{fontStyle: \"italic\",}}>True</span></div>\n                <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>end if</span></div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span> <span style={{fontStyle: \"italic\",}}>k(x) &#8805; k(y)</span> <span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}>k(y) &#8592; k(x) + 1</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>else</span></div>\n                <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 6)?\"yellow\" : \"white\"}}>j &#8592; &#8970;log<sub>2</sub>(min{\"{k(x) - k(y), d(y)}\"})&#8971; </div>\n                <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 6)?\"yellow\" : \"white\"}}>c(j, y) &#8592; c(j, y) + 1</div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>if</span> <span style={{fontStyle: \"italic\",}}>c(j, y) = 3 * 2<sup>j</sup></span> <span style={{fontWeight: \"bold\"}}>then</span></div>\n                <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>c(j, y) &#8592; 0</div>\n                <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>k(y) &#8592; max{\"{k(y), b(j, y) + \"}2<sup>j</sup>{\"}\"}</div>\n                <div style={{textIndent: 45, fontStyle: \"italic\", backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>b(j, y) &#8592; k(y)</div>\n                <div style={{textIndent: 30, fontWeight: \"bold\"}}>{\"end if\"}</div>\n                <div style={{textIndent: 15, fontWeight: \"bold\"}}>{\"end if\"}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>while</span> <span style={{fontStyle: \"italic\",}}>k<sub>out</sub>(top(out(y))) &#8804; k(y)</span> <span style={{fontWeight: \"bold\"}}>do</span></div>\n                <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 10)?\"yellow\" : \"white\"}}>o &#8592; extractMin(out(y))</div>\n                <div style={{textIndent: 30, fontStyle: \"italic\", backgroundColor: (props.step === 10)?\"yellow\" : \"white\"}}>T &#8592; T &#8746; {\"{o}\"} </div>\n                <div style={{textIndent: 15}}><span style={{fontWeight: \"bold\"}}>end while </span></div>\n                <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 11)?\"yellow\" : \"white\"}}> k<sub>out</sub>(x, y) &#8592; k(y)</div>\n                <div style={{textIndent: 15, fontStyle: \"italic\", backgroundColor: (props.step === 11)?\"yellow\" : \"white\"}}> insert((x, y), out(x))</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 12)?\"yellow\" : \"white\"}}><span style={{fontWeight: \"bold\"}}>return </span><span style={{fontStyle: \"italic\",}}>False</span></div>\n            </div>\n        )\n    } else {\n        return (<div> </div>)\n    }\n}\n\nfunction DenseGraphSubprocedure(props) {\n    return(\n        <div>\n            <h3>Dílčí funkce:</h3>\n            <DenseGraphSubprocedurePseudocode\n                procedure={props.procedure}\n                step={props.step}\n            />\n        </div>\n    )\n}\n\nexport default DenseGraphSubprocedure;","import React from \"react\";\nimport Graph from \"react-graph-vis\";\nimport './graphStyle.css';\nimport SparseGraphPseudocode from \"./SparseGraphPseudocode\";\nimport SparseGraphSubprocedure from \"./SparseGraphSubprocedure\";\nimport GraphDemoLoading from \"./GraphDemoLoading\";\nimport DenseGraphPseudocode from \"./DenseGraphPseudocode\";\nimport DenseGraphSubprocedure from \"./DenseGraphSubprocedure\";\n\nconst RADIUS = 200;\n\nclass NetworkGraph extends React.Component {\n    constructor(props) {\n        super(props);\n        this.visited = [];\n        this.status = {\n            LESS_THAN_DELTA_EDGES: 0,\n            CYCLE_FOUND: 1,\n            MORE_THAN_DELTA_EDGES: 2\n        }\n\n        // inspired by: https://gist.github.com/mucar/3898821\n        this.color = ['#1AB399', '#F16FF1', '#F91AFF', '#06C6FF', '#4DB3FF',\n            '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\n            '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\n            '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\n            '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC',\n            '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680',\n            '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\n            '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3',\n            '#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\n            '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF',\n            '#1AB399', '#F16FF1', '#F91AFF', '#06C6FF', '#4DB3FF',\n            '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\n            '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',\n            '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\n            '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC',\n            '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680',\n            '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\n            '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3',\n            '#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',\n            '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'\n        ];\n\n        this.state = {\n            graphType: \"sparse\",\n            sequenceToAdd: [],\n            subprocedure: 0,\n            subprocedureStep: 0,\n            mainProcedureStep: 0,\n            timeoutInput: 500,\n            timeout: 500,\n            followerList: {},\n            e_in: {}, // JSON of lists in incoming edges\n            delta: 0,\n            inProgress: false,\n            visited: [],\n            addingEdge: false,\n            from: 0,\n            to: 0,\n            numberOfVertices: 0,\n            nodes: [],\n            edges: [],\n            b: [],\n            c: []\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.generateGraph = this.generateGraph.bind(this);\n        this.addEdge = this.addEdge.bind(this);\n        this.changeVertex = this.changeVertex.bind(this);\n        this.changeEdge = this.changeEdge.bind(this);\n        this.colorGraphToDefault = this.colorGraphToDefault.bind(this);\n        this.changeProgress = this.changeProgress.bind(this);\n        this.addVisitedVertex = this.addVisitedVertex.bind(this);\n        this.clearVisitedVertices = this.clearVisitedVertices.bind(this);\n        this.setTimeoutFromInput = this.setTimeoutFromInput.bind(this);\n        this.addVertexToEin = this.addVertexToEin.bind(this);\n        this.setEinOfVertex = this.setEinOfVertex.bind(this);\n        this.setSubprocedureStep = this.setSubprocedureStep.bind(this);\n        this.changeValue = this.changeValue.bind(this);\n        this.cancelDemo = this.cancelDemo.bind(this);\n        this.step = this.step.bind(this);\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\n    }\n\n    async changeValue(id, newValue) {\n        await this.setState({\n            [id]: newValue\n        })\n    }\n\n    /**\n     * Sets step of the specified subprocedure for pseudocode animation\n     *\n     * @param subprocedure - Number of subprocedure we want to animate\n     * @param step - Current step in specified subprocedure\n     * @returns {Promise<void>}\n     */\n    async setSubprocedureStep(subprocedure, step) {\n        await this.setState({\n            subprocedure: subprocedure,\n            subprocedureStep: step\n        })\n    }\n\n    /**\n     * Adds a vertex to the e_in set\n     *\n     * @param successor - Vertex which e_in should be expanded\n     * @param predecessor - Vertex to be added\n     * @returns {Promise<void>}\n     */\n    async addVertexToEin(successor, predecessor) {\n        const oldEin = await this.state.e_in;\n        await oldEin[successor].push(predecessor);\n        await this.setState({\n            e_in: oldEin,\n        });\n    }\n\n    /**\n     * Sets the set of incoming edges to be the value given as parameter\n     *\n     * @param vertex - ID of vertex which e_in should be changed\n     * @param toBeSet - New value of e_in\n     * @returns {Promise<void>}\n     */\n    async setEinOfVertex(vertex, toBeSet) {\n        await this.setState(async prevState => {\n            prevState.e_in[vertex] = await toBeSet;\n            return prevState;\n        })\n    }\n\n    /**\n     * Handles changes of the controllers\n     *\n     * @param event - Object returned by event\n     */\n    handleChange(event) {\n        const {name, value} = event.target;\n        this.setState({\n            [name]: parseInt(value)\n        })\n    }\n\n    /**\n     * Changes the actual graph type and also resets the graph properties\n     *\n     * @param event\n     */\n    handleDropdownChange(event) {\n        if (!this.state.inProgress) {\n            this.setState({\n                graphType: event.target.value,\n                sequenceToAdd: [],\n                subprocedure: 0,\n                subprocedureStep: 0,\n                mainProcedureStep: 0,\n                timeoutInput: 500,\n                timeout: 500,\n                followerList: {},\n                e_in: {}, // JSON of lists in incoming edges\n                delta: 0,\n                inProgress: false,\n                visited: [],\n                addingEdge: false,\n                from: 0,\n                to: 0,\n                numberOfVertices: 0,\n                nodes: [],\n                edges: [],\n                b: [],\n                c: []\n            });\n        }\n    }\n\n    /**\n     * Generates new graph, sets levels of all vertices to 1\n     *\n     * @returns {Promise<void>}\n     */\n    async generateGraph() {\n        let actualAngle = 0;\n        let nodesArr = [];\n        let bArr = [];\n        let bTmp;\n        let cArr = [];\n        let cTmp;\n        let followerList = {};\n        let e_in = {};\n        await this.setState({\n            //sequenceToAdd: [],\n            nodes: [],\n        })\n        for (let i = 1; i <= this.state.numberOfVertices; ++i) {\n            bTmp = [];\n            cTmp = [];\n            for (let j = 1; j <= this.state.numberOfVertices; ++j) {\n                bTmp.push(1);\n                cTmp.push(0);\n            }\n            bArr.push(bTmp);\n            cArr.push(cTmp);\n            await nodesArr.push({\n                id: i,\n                level: 1,\n                inDegree: 0,\n                label: i.toString() + \", 1\",\n                title: i.toString(),\n                color: this.color[0],\n                x: RADIUS * Math.sin(actualAngle),\n                y: RADIUS * Math.cos(actualAngle)\n            });\n            followerList[i] = [];\n            e_in[i] = []; // initializing list of incoming edges\n            actualAngle += await (2 * Math.PI) / (this.state.numberOfVertices);\n        }\n        await this.setState({\n            mainProcedureStep: 0,\n            followerList: followerList,\n            e_in: e_in,\n            nodes: nodesArr,\n            edges: [],\n            delta: 0,\n            from: 0,\n            to: 0,\n            b: bArr,\n            c: cArr\n        });\n\n        /**\n         * Osetřit jinak!!!\n         */\n        if (this.state.sequenceToAdd.length !== 10) {\n            this.setState({\n                sequenceToAdd: []\n            })\n        }\n    }\n\n    /**\n     * Adds new edge to graph\n     * @param k_out - approximate level of an edge (used as key)\n     * @returns {Promise<void>}\n     */\n    async addEdge(k_out = 1) {\n        const from = parseInt(this.state.from);\n        const to = parseInt(this.state.to);\n\n        const oldEdges = await this.state.edges.slice();\n        await oldEdges.push({\n            from: from,\n            to: to,\n            color: \"black\",\n            width: 3,\n            k_out: k_out,\n            label: (k_out === 1) ? \"\" : k_out.toString(),\n            font: {background: \"white\"},\n        });\n\n        const oldFollowerList = await this.state.followerList;\n        await oldFollowerList[from].push(to);\n        await this.setState({\n            followerList: oldFollowerList,\n            edges: oldEdges,\n        });\n    }\n\n    DisplayAddingStatus() {\n        if (this.state.addingEdge && this.state.from === 0) {\n            return (\n                <p>Select starting vertex</p>\n            );\n        } else if (this.state.addingEdge && this.state.from !== 0) {\n            return (\n                <p>Select ending vertex</p>\n            );\n        } else {\n            return (<p>doing nothing</p>);\n        }\n    }\n\n    /**\n     * Action performed after node is selected via mouse click\n     *\n     * @param event - Event provided by mouse click\n     * @returns {Promise<void>}\n     */\n    async selectVertex(event) {\n        const {nodes} = event;\n\n        if (this.state.addingEdge && this.state.from !== 0) {\n            await this.setState({\n                to: nodes[0],\n                addingEdge: false\n            });\n            //await this.addEdge();\n        }\n        await this.setState({\n            from: nodes[0]\n        })\n\n    }\n\n    /**\n     * Stops program for specified amount of time\n     *\n     * @param sleepTime - Time to sleep\n     * @returns {Promise<unknown>}\n     */\n    sleepNow = (sleepTime) => new Promise((r) => setTimeout(r, sleepTime));\n\n    /**\n     * Changing parameters of vertex with given id to specified attributes\n     *\n     * @param id - ID of the node to be changed\n     * @param color - Color to be set\n     * @param levelIncrease - Value by which nodes level should be increased\n     * @param degreeIncrease - Value by which nodes degree should be increased\n     * @returns {Promise<void>}\n     */\n    async changeVertex(id, color, levelIncrease, degreeIncrease = 0) {\n        await this.setState(prevState => {\n            prevState.nodes = prevState.nodes.map(node => {\n                if (node.id === id) {\n                    return {\n                        id: id,\n                        level: node.level + levelIncrease,\n                        inDegree: node.inDegree + degreeIncrease,\n                        label: id.toString() + \", \" + (node.level + levelIncrease).toString(),\n                        title: node.title,\n                        color: color\n                    }\n                }\n                return node;\n            })\n            return {\n                nodes: prevState.nodes\n            };\n        })\n    }\n\n    /**\n     * Changes inProgress flag\n     */\n    changeProgress() {\n        this.setState(prevState => {\n            return {\n                inProgress: !prevState.inProgress\n            };\n        })\n    }\n\n    /**\n     * Adds vertex to set of visited vertices\n     *\n     * @param vertex - ID of vertex to be added\n     * @returns {Promise<void>}\n     */\n    async addVisitedVertex(vertex) {\n        await this.setState(prevState => {\n            prevState.visited.push(vertex);\n            return prevState;\n        })\n    }\n\n    /**\n     * Clears set of visited vertices\n     *\n     * @returns {Promise<void>}\n     */\n    async clearVisitedVertices() {\n        await this.setState({\n            visited: []\n        })\n    }\n\n    /**\n     * Colors given edge to red color (used for animation of searching through edges)\n     *\n     * @param from - Starting vertex of edge\n     * @param to - Ending vertex of edge\n     * @param color - Color of the edge\n     * @param newKOut - new value of k_out for current edge\n     * @returns {Promise<void>}\n     */\n    async changeEdge(from, to, color, newKOut = 0) {\n        let oldEdges = await this.state.edges.slice();\n        const index = oldEdges.findIndex(item =>\n            item.from === from && item.to === to\n        );\n        const edgeKOut = oldEdges[index].k_out;\n        await oldEdges.splice(index, 1);\n        await oldEdges.push({\n                from: from,\n                to: to,\n                k_out: (newKOut === 0) ? edgeKOut : newKOut,\n                label: (newKOut === 0) ? \"\" : newKOut.toString(),\n                font: {background: \"white\"},\n                color: color,\n                width: 3\n            }\n        )\n        await this.setState({\n            edges: oldEdges,\n        });\n    }\n\n\n    /**\n     * Colors whole graph back to default colors\n     *\n     * @returns {Promise<void>}\n     */\n    async colorGraphToDefault() {\n        /**\n         * Coloring all edges back to black\n         */\n        let oldEdges = await this.state.edges.slice();\n        for (let i = 0; i < oldEdges.length; ++i) {\n            let tmpEdge = {\n                from: oldEdges[0].from,\n                to: oldEdges[0].to,\n                k_out: oldEdges[0].k_out,\n                label: oldEdges[0].label,\n                font: {background: \"white\"},\n                color: \"black\",\n                width: 3\n            };\n\n            await oldEdges.splice(0, 1);\n            await oldEdges.push(tmpEdge);\n        }\n\n        await this.setState({\n            edges: oldEdges,\n        });\n\n        /**\n         * Coloring all vertices to default\n         */\n        await this.setState(prevState => {\n            prevState.nodes = prevState.nodes.map(node => {\n                node = {\n                    id: node.id,\n                    level: node.level,\n                    inDegree: node.inDegree,\n                    label: node.label,\n                    title: node.title,\n                    color: this.color[node.level - 1]\n                }\n                return node;\n            })\n            return {\n                nodes: prevState.nodes\n            };\n        })\n    }\n\n    /**\n     * Sets value of pause using value in number input\n     */\n    setTimeoutFromInput() {\n        this.setState({\n            timeout: this.state.timeoutInput\n        })\n    }\n\n\n    /**************************/\n\n    /* Sparse graph algorithm */\n\n    /**\n     * Main procedure of algorithm for sparse graphs\n     *\n     * @returns {Promise<boolean>}\n     */\n    async insertEdgeSparse() {\n        let forward = false;\n        let actualStatus;\n\n        let fromVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === this.state.from)],\n            toVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === this.state.to)];\n\n        await this.changeVertex(fromVertex.id, \"orange\", 0);\n        await this.changeVertex(toVertex.id, \"orange\", 0);\n\n        await this.changeValue(\"mainProcedureStep\", 1);\n        await this.sleepNow(this.state.timeout);\n\n        // await console.log(\"fromVertex:\", fromVertex, \"toVertex:\", toVertex);\n        // await console.log(\"delta:\", this.state.delta);\n\n\n        if (!(await this.testOrdering(this.state.from, this.state.to))) {\n\n            /**\n             * Opravit v implementaci a BP!!!\n             */\n            actualStatus = await this.backwardSearch(fromVertex.id, toVertex.id);\n\n            if (actualStatus === this.status.CYCLE_FOUND) {\n                await this.changeValue(\"mainProcedureStep\", 4);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 5);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 0);\n\n                return true;\n            } else if (actualStatus === this.status.LESS_THAN_DELTA_EDGES && (toVertex.level < fromVertex.level)) {\n\n                await this.changeValue(\"mainProcedureStep\", 6);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 7);\n                await this.sleepNow(this.state.timeout);\n\n                await this.changeVertex(toVertex.id, \"orange\", (fromVertex.level - toVertex.level));\n                await this.setEinOfVertex(toVertex.id, []);\n                forward = true;\n            } else if (actualStatus === this.status.MORE_THAN_DELTA_EDGES) {\n\n                await this.changeValue(\"mainProcedureStep\", 8);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 9);\n                await this.sleepNow(this.state.timeout);\n\n                await this.changeVertex(toVertex.id, \"orange\", ((fromVertex.level - toVertex.level) + 1));\n                await this.setEinOfVertex(toVertex.id, []);\n                await this.clearVisitedVertices();\n                await this.addVisitedVertex(fromVertex.id);\n                forward = true;\n            }\n\n            if (forward) {\n                await this.changeValue(\"mainProcedureStep\", 10);\n                await this.setSubprocedureStep(3, 0);\n                await this.sleepNow(this.state.timeout);\n\n                actualStatus = (await this.forwardSearch(this.state.to));\n                if (actualStatus) {\n                    await this.changeValue(\"mainProcedureStep\", 11);\n                    await this.sleepNow(this.state.timeout);\n                    await this.changeValue(\"mainProcedureStep\", 0);\n\n                    return true;\n                }\n            }\n        }\n\n        await this.colorGraphToDefault();\n\n        await this.changeValue(\"mainProcedureStep\", 12);\n        await this.sleepNow(this.state.timeout);\n\n        await this.addingEdge(fromVertex.id, toVertex.id);\n        await this.clearVisitedVertices();\n        await this.changeValue(\"mainProcedureStep\", 0);\n        await this.setSubprocedureStep(0, 0);\n        return false;\n    }\n\n    async testOrdering(from, to) {\n        let fromLevel = this.state.nodes[this.state.nodes.findIndex(node => node.id === from)].level,\n            toLevel = this.state.nodes[this.state.nodes.findIndex(node => node.id === to)].level;\n\n        await this.changeValue(\"mainProcedureStep\", 2);\n        await this.setSubprocedureStep(1, 0);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(1, 1);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(0, 0);\n        return (fromLevel < toLevel);\n    }\n\n    async backwardSearch(start, w) {\n        await this.changeValue(\"mainProcedureStep\", 3);\n        await this.setSubprocedureStep(2, 0);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(2, 1);\n        await this.sleepNow(this.state.timeout);\n\n        if (start === w) {\n            await this.setSubprocedureStep(2, 2);\n            await this.sleepNow(this.state.timeout);\n\n            return this.status.CYCLE_FOUND;\n        }\n        await this.setSubprocedureStep(2, 3);\n        await this.sleepNow(this.state.timeout);\n\n        await this.addVisitedVertex(start);\n\n        await this.setSubprocedureStep(2, 4);\n        await this.sleepNow(this.state.timeout);\n        if (this.state.e_in[start].length === 0 && this.state.visited.length >= this.state.delta + 1) {\n            await this.setSubprocedureStep(2, 5);\n            await this.sleepNow(this.state.timeout);\n\n            return this.status.MORE_THAN_DELTA_EDGES;\n        }\n\n        for (let i = 0; i < this.state.e_in[start].length; ++i) {\n            let predecessor = await this.state.e_in[start][i];\n\n            await this.setSubprocedureStep(2, 8);\n            await this.sleepNow(this.state.timeout);\n\n            if (this.state.visited.length >= this.state.delta + 1) {\n\n                await this.setSubprocedureStep(2, 9);\n                await this.sleepNow(this.state.timeout);\n                await this.setSubprocedureStep(0, 0);\n\n                return this.status.MORE_THAN_DELTA_EDGES;\n            }\n\n            if (this.state.visited.includes(predecessor)) {\n                continue;\n            }\n\n            // Coloring backward-searched edges\n            await this.changeEdge(predecessor, start, \"red\");\n            await this.setSubprocedureStep(2, 10);\n            await this.sleepNow(this.state.timeout);\n            let actualStatus = await this.backwardSearch(predecessor, w);\n\n            await this.setSubprocedureStep(2, 11);\n            await this.sleepNow(this.state.timeout);\n            if (actualStatus === this.status.CYCLE_FOUND || actualStatus === this.status.MORE_THAN_DELTA_EDGES) {\n                if (actualStatus === this.status.CYCLE_FOUND) {\n                    await this.setSubprocedureStep(2, 12);\n                    await this.sleepNow(this.state.timeout);\n                } else if (actualStatus === this.status.MORE_THAN_DELTA_EDGES) {\n                    await this.setSubprocedureStep(2, 13);\n                    await this.sleepNow(this.state.timeout);\n                }\n                await this.setSubprocedureStep(0, 0);\n                return actualStatus;\n            }\n            await this.setSubprocedureStep(2, 14);\n            await this.sleepNow(this.state.timeout);\n        }\n        await this.setSubprocedureStep(2, 15);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(0, 0);\n        return this.status.LESS_THAN_DELTA_EDGES;\n    }\n\n    async forwardSearch(w) {\n        // Simulation of set (JS set is not very smart)\n        await this.setSubprocedureStep(3, 1);\n        await this.sleepNow(this.state.timeout);\n\n        let F = [w];\n\n        while (F.length) {\n            await this.setSubprocedureStep(3, 2);\n            await this.sleepNow(this.state.timeout);\n\n            let actual = await F.pop();\n            actual = this.state.nodes[this.state.nodes.findIndex(node => node.id === actual)];\n\n            for (let i = 0; i < this.state.followerList[actual.id].length; ++i) {\n\n                let successor = await this.state.followerList[actual.id][i];\n                successor = this.state.nodes[this.state.nodes.findIndex(node => node.id === successor)];\n\n                // Animation\n                //console.log(\"Searching forward edge: (\", actual.id, \", \", successor.id, \")\");\n                await this.changeEdge(actual.id, successor.id, \"blue\");\n                await this.setSubprocedureStep(3, 3);\n                await this.sleepNow(this.state.timeout);\n\n                if (this.state.visited.includes(successor.id)) {\n                    await this.setSubprocedureStep(3, 4);\n                    await this.sleepNow(this.state.timeout);\n                    await this.setSubprocedureStep(0, 0);\n\n                    return true;\n                }\n\n                if (actual.level === successor.level) {\n                    await this.setSubprocedureStep(3, 5);\n                    await this.sleepNow(this.state.timeout);\n                    await this.setSubprocedureStep(3, 6);\n                    await this.sleepNow(this.state.timeout);\n\n                    await this.addVertexToEin(successor.id, actual.id);\n                } else if (actual.level > successor.level) {\n                    await this.setSubprocedureStep(3, 7);\n                    await this.sleepNow(this.state.timeout);\n                    await this.setSubprocedureStep(3, 8);\n                    await this.sleepNow(this.state.timeout);\n\n                    await this.changeVertex(successor.id, this.color[successor.level + (actual.level - successor.level) - 1], (actual.level - successor.level));\n                    await this.setEinOfVertex(successor.id, [actual.id]);\n                    await F.push(successor.id);\n                }\n            }\n        }\n        await this.setSubprocedureStep(3, 9);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(0, 0);\n\n        return false;\n    }\n\n    async addingEdge(from, to) {\n\n        from = this.state.nodes[this.state.nodes.findIndex(node => node.id === from)];\n        to = this.state.nodes[this.state.nodes.findIndex(node => node.id === to)];\n\n        await this.setSubprocedureStep(4, 1);\n        await this.sleepNow(this.state.timeout);\n\n        await this.addEdge();\n\n        if (from.level === to.level) {\n            await this.setSubprocedureStep(4, 2);\n            await this.sleepNow(this.state.timeout);\n            await this.setSubprocedureStep(4, 3);\n            await this.sleepNow(this.state.timeout);\n\n            await this.addVertexToEin(to.id, from.id);\n        }\n        await this.setSubprocedureStep(4, 4);\n        await this.sleepNow(this.state.timeout);\n\n        await this.changeValue(\"delta\", await Math.min(await Math.sqrt(this.state.edges.length),\n            await Math.pow(this.state.nodes.length, (2 / 3))));\n\n        await this.setSubprocedureStep(0, 0);\n    }\n\n    /**************************/\n\n    async insertEdgeDense() {\n        //await console.log(this.state);\n\n        let fromVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === this.state.from)],\n            toVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === this.state.to)];\n\n        // Coloring edges + increasing in-degree of ending edge\n        await this.changeVertex(fromVertex.id, \"orange\", 0);\n        await this.changeVertex(toVertex.id, \"orange\", 0, 1);\n        toVertex.inDegree++;\n\n        await this.changeValue(\"mainProcedureStep\", 1);\n        await this.sleepNow(this.state.timeout);\n\n\n        if (fromVertex.level < toVertex.level) {\n\n            await this.changeValue(\"mainProcedureStep\", 2);\n            await this.sleepNow(this.state.timeout);\n            await this.changeValue(\"mainProcedureStep\", 3);\n            await this.sleepNow(this.state.timeout);\n\n            let j = Math.floor(Math.log2(Math.min(toVertex.level - fromVertex.level, toVertex.inDegree)));\n\n            //await console.log(`j = ${j}`);\n\n            if (toVertex.inDegree === Math.pow(2, j)) {\n\n                await this.changeValue(\"mainProcedureStep\", 4);\n                await this.sleepNow(this.state.timeout);\n\n                let oldB = await this.state.b.slice();\n                oldB[j][toVertex.id] = await toVertex.level;\n                await this.setState({\n                    b: oldB\n                })\n\n                let oldC = await this.state.c.slice();\n                oldC[j][toVertex.id] = 0;\n                oldC[j - 1][toVertex.id] = 0;\n                await this.setState({\n                    c: oldC\n                })\n                await this.changeValue(\"mainProcedureStep\", 5);\n                await this.sleepNow(this.state.timeout);\n            }\n\n            await this.changeValue(\"mainProcedureStep\", 6);\n            await this.sleepNow(this.state.timeout);\n            await this.changeValue(\"mainProcedureStep\", 7);\n            await this.sleepNow(this.state.timeout);\n\n            await this.addEdge(toVertex.level);\n            await this.changeEdge(fromVertex.id, toVertex.id, \"blue\", toVertex.level);\n\n            await this.changeValue(\"mainProcedureStep\", 8);\n            await this.sleepNow(this.state.timeout);\n\n            await this.colorGraphToDefault();\n            await this.clearVisitedVertices();\n            await this.changeValue(\"mainProcedureStep\", 0);\n            await this.setSubprocedureStep(0, 0);\n\n            return false;\n        }\n\n        await this.addEdge(toVertex.level);\n        await this.changeEdge(fromVertex.id, toVertex.id, \"white\");\n\n        await this.changeValue(\"mainProcedureStep\", 9);\n        await this.sleepNow(this.state.timeout);\n\n        let T = [{from: fromVertex.id, to: toVertex.id}];\n\n        while (T.length) {\n\n            await this.changeValue(\"mainProcedureStep\", 10);\n            await this.sleepNow(this.state.timeout);\n\n            let currentEdge = await T.pop();\n\n            //await console.log(currentEdge);\n\n            await this.changeValue(\"mainProcedureStep\", 11);\n            await this.sleepNow(this.state.timeout);\n            if (await this.traversalStep(currentEdge.from, currentEdge.to, T, fromVertex.id)) {\n\n                await this.changeValue(\"mainProcedureStep\", 12);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 0);\n\n                return true;\n            }\n\n            //await console.log(`traversed edge: from: ${currentEdge.from} to: ${currentEdge.to}`)\n            //await console.log(this.state.edges)\n        }\n        await this.colorGraphToDefault();\n\n        await this.changeValue(\"mainProcedureStep\", 13);\n        await this.sleepNow(this.state.timeout);\n\n        await this.clearVisitedVertices();\n        await this.changeValue(\"mainProcedureStep\", 0);\n        await this.setSubprocedureStep(0, 0);\n\n        return false;\n    }\n\n    async traversalStep(from, to, T, v) {\n\n        await this.changeEdge(from, to, \"blue\");\n        await this.setSubprocedureStep(1, 0);\n        await this.sleepNow(this.state.timeout);\n\n        if (to === v) {\n            await this.setSubprocedureStep(1, 1);\n            await this.sleepNow(this.state.timeout);\n            await this.setSubprocedureStep(1, 2);\n            await this.sleepNow(this.state.timeout);\n            await this.setSubprocedureStep(0, 0);\n            await this.sleepNow(this.state.timeout);\n            return true;\n        }\n\n        let fromVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === from)],\n            toVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === to)];\n\n        //await console.log(`Entered edge: (${fromVertex.id}, ${toVertex.id}`);\n\n        if (fromVertex.level >= toVertex.level) {\n            await this.setSubprocedureStep(1, 3);\n            await this.sleepNow(this.state.timeout);\n\n            //await console.log(`k(v) = ${fromVertex.level}, k(w) = ${toVertex.level}`)\n            //await console.log(`Changing vertex`)\n            const newColor = (toVertex.id === this.state.to) ? \"orange\" : this.color[toVertex.level + (fromVertex.level - toVertex.level)];\n            await this.changeVertex(toVertex.id, newColor, (fromVertex.level - toVertex.level) + 1);\n\n            //await console.log(`vertex changed!`)\n            await this.setSubprocedureStep(1, 4);\n            await this.sleepNow(this.state.timeout);\n\n            toVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === toVertex.id)];\n        } else {\n            await this.setSubprocedureStep(1, 5);\n            await this.sleepNow(this.state.timeout);\n            await this.setSubprocedureStep(1, 6);\n            await this.sleepNow(this.state.timeout);\n\n            let j = Math.floor(Math.log2(Math.min(toVertex.level - fromVertex.level, toVertex.inDegree)));\n\n            let oldC = await this.state.c.slice();\n            oldC[j][toVertex.id] += 1;\n            await this.setState({\n                c: oldC\n            })\n\n            if (this.state.c[j][toVertex.id] === 3 * Math.pow(2, j)) {\n                await this.setSubprocedureStep(1, 7);\n                await this.sleepNow(this.state.timeout);\n                await this.setSubprocedureStep(1, 8);\n                await this.sleepNow(this.state.timeout);\n\n                let oldC = await this.state.c.slice();\n                oldC[j][toVertex.id] = 0;\n                await this.setState({\n                    c: oldC\n                })\n\n                await this.changeVertex(toVertex.id, toVertex.color, Math.max(toVertex.level, this.state.b[j][toVertex.id] + Math.pow(2, j)));\n\n                toVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === toVertex.id)];\n\n                let oldB = await this.state.b.slice();\n                oldB[j][toVertex.id] = toVertex.level;\n                await this.setState({\n                    b: oldB\n                })\n            }\n        }\n\n        let edgesToBeTraversed = this.state.edges.filter((edge) => {\n            return edge.from === toVertex.id && edge.k_out <= toVertex.level\n        });\n\n        //await console.log(\"Edges to be traversed: \" + edgesToBeTraversed);\n\n        for (let i = 0; i < edgesToBeTraversed.length; ++i) {\n            await this.setSubprocedureStep(1, 9);\n            await this.sleepNow(this.state.timeout);\n            await this.setSubprocedureStep(1, 10);\n            await this.sleepNow(this.state.timeout);\n\n            T.push({from: edgesToBeTraversed[i].from, to: edgesToBeTraversed[i].to});\n        }\n\n        //await console.log(`Actual edge: (${fromVertex.id}, ${toVertex.id}`);\n        //await console.log(this.state.edges);\n\n        await this.setSubprocedureStep(1, 11);\n        await this.sleepNow(this.state.timeout);\n\n        const index = this.state.edges.findIndex(e => e.from === fromVertex.id && e.to === toVertex.id);\n\n        //await console.log(index);\n\n        const edgeColor = this.state.edges[index].color;\n\n        await this.changeEdge(fromVertex.id, toVertex.id, edgeColor, toVertex.level);\n\n        await this.setSubprocedureStep(1, 12);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(0, 0);\n\n        return false;\n    }\n\n    async mainProcedure() {\n        if (!this.state.inProgress) {\n            const from = parseInt(this.state.from);\n            const to = parseInt(this.state.to);\n\n            await this.changeProgress();\n\n            if (to === from) {\n                window.alert(\"Smyčky jsou zakázány!\");\n            } else if (this.state.edges.some(edge => edge.from === from && edge.to === to)) {\n                window.alert(\"Hrana již existuje!\");\n            } else if (from > this.state.numberOfVertices || to > this.state.numberOfVertices ||\n                from < 1 || to < 1) {\n                await window.alert(\"Zvolené vrcholy se v grafu nenacházejí!\");\n            } else if (this.state.graphType === \"sparse\") {\n                if (await this.insertEdgeSparse()) {\n                    // Adding edge which creates cycle (green color)\n                    await this.addEdge();\n                    await this.changeEdge(this.state.from, this.state.to, \"green\");\n\n                    await console.log(\"cycle\");\n                    await window.alert(\"Zjištěn cyklus!\");\n                }\n            } else if (this.state.graphType === \"dense\") {\n                if (await this.insertEdgeDense()) {\n\n                    const index = this.state.edges.findIndex(item =>\n                        item.from === from && item.to === to\n                    );\n                    const edgeKOut = this.state.edges[index].k_out;\n\n                    await this.changeEdge(this.state.from, this.state.to, \"green\", edgeKOut);\n\n                    await console.log(\"cycle\");\n                    await window.alert(\"Zjištěn cyklus!\");\n                }\n            }\n            await this.changeProgress();\n            console.log(this.state.edges)\n        }\n    }\n\n\n    async step() {\n        await this.changeValue(\"from\", this.state.sequenceToAdd[0][0]);\n        await this.changeValue(\"to\", this.state.sequenceToAdd[0][1]);\n        /**\n         * This is actual algorithm\n         */\n        await this.mainProcedure();\n\n        let tmp = this.state.sequenceToAdd.slice();\n        tmp.shift();\n        await this.changeValue(\"sequenceToAdd\", tmp);\n    }\n\n    DemoStep() {\n        function renderTupleList(list) {\n            let out = \"\";\n            for (let i = 0; i < list.length; ++i) {\n                out += \"(\" + list[i][0] + \", \" + list[i][1] + \")\";\n                out += (i < list.length - 1) ? \", \" : \"\";\n            }\n            return out;\n        }\n\n        return (\n            <div\n                className={\"demo-step\"}\n            >\n                <div\n                    className={\"demo-step__column1\"}\n                >\n                    <p>Sekvence hran k vložení: {renderTupleList(this.state.sequenceToAdd)}</p>\n                    <p>Přidávám hranu z {this.state.from} do {this.state.to}</p>\n                    <button\n                        className={\"demo-step__button\"}\n                        onClick={this.state.inProgress ? () => {\n                        } : this.step}\n                    >\n                        Přidat hranu ze sekvence\n                    </button>\n                </div>\n                <div\n                    className={\"demo-step__column2\"}\n                >\n                    <label>\n                        <span style={{\n                            fontWeight: \"bold\",\n                        }}>Délka kroku [ms]:\n                        </span>\n                        <input\n                            name={\"timeoutInput\"}\n                            type={\"number\"}\n                            value={this.state.timeoutInput}\n                            onChange={this.handleChange}\n                        />\n                    </label>\n                    <button\n                        onClick={this.setTimeoutFromInput}\n                    >\n                        Nastav délku kroku\n                    </button>\n                    {(this.state.graphType === \"sparse\") ?\n                        <h2>&#916; = {this.state.delta}</h2> : \"\"}\n                </div>\n            </div>\n        )\n    }\n\n    async cancelDemo() {\n        await this.changeValue(\"sequenceToAdd\", []);\n        await this.changeValue(\"numberOfVertices\", 0);\n        await this.setSubprocedureStep(0, 0);\n        await this.generateGraph();\n        //await console.log(this.state.sequenceToAdd);\n    }\n\n    cancelDemoButton() {\n        return (\n            <button\n                onClick={(!this.state.inProgress) ? this.cancelDemo : () => {\n                }}\n            >\n                Zruš demo\n            </button>\n        )\n    }\n\n    manualAdding() {\n        return (\n            <div\n                className={\"demo-step\"}\n            >\n                <div\n                    className={\"demo-step__column1\"}\n                >\n                    <p>Přidávám hranu z {this.state.from} do {this.state.to}</p>\n\n                    <div className={\"demo-step__row\"}>\n                        <label className={\"demo-step__input-group\"}>\n                            <span style={{\n                                fontWeight: \"bold\"\n                            }}>Výchozí vrchol:\n                        </span>\n                            <input\n                                name={\"from\"}\n                                type={\"number\"}\n                                value={this.state.from}\n                                onChange={(!this.state.inProgress) ? this.handleChange : () => {\n                                }}\n                            />\n                        </label>\n                        <label className={\"demo-step__input-group\"}>\n                            <span style={{\n                                fontWeight: \"bold\",\n                            }}>Koncový vrchol:\n                        </span>\n                            <input\n                                name={\"to\"}\n                                type={\"number\"}\n                                value={this.state.to}\n                                onChange={(!this.state.inProgress) ? this.handleChange : () => {\n                                }}\n                            />\n                        </label>\n                    </div>\n                    <button\n                        className={\"demo-step__button\"}\n                        onClick={() => {\n                            this.mainProcedure();\n                        }}\n                    >\n                        Vlož hranu\n                    </button>\n                    <br/>\n\n                </div>\n                <div\n                    className={\"demo-step__column2\"}\n                >\n                    <label>\n                        <span style={{\n                            fontWeight: \"bold\",\n                        }}>Délka kroku [ms]:\n                        </span>\n                        <input\n                            name={\"timeoutInput\"}\n                            type={\"number\"}\n                            value={this.state.timeoutInput}\n                            onChange={this.handleChange}\n                        />\n                    </label>\n                    <button\n                        onClick={this.setTimeoutFromInput}\n                    >\n                        Nastav délku kroku\n                    </button>\n\n                    {(this.state.graphType === \"sparse\") ?\n                        <h2>&#916; = {this.state.delta}</h2> : \"\"}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        const graph = {nodes: this.state.nodes, edges: this.state.edges};\n\n        const options = {\n            layout: {\n                hierarchical: false\n            },\n            edges: {\n                color: \"#000000\",\n                smooth: {type: \"curvedCCW\"}\n            },\n            physics: {\n                enabled: false\n            },\n        };\n\n        return (\n            <div>\n                <div\n                    className={\"top-panel\"}\n                >\n                    <div\n                        className={\"top-panel__element\"}\n                    >\n                        <label>\n                            <span style={{\n                                fontWeight: \"bold\"\n                            }}>Počet vrcholů:\n                        </span>\n                            <input\n                                name={\"numberOfVertices\"}\n                                type={\"number\"}\n                                value={this.state.numberOfVertices}\n                                onChange={this.handleChange}\n                            />\n                        </label>\n                        <button\n                            onClick={(!this.state.inProgress) ? this.generateGraph : () => {\n                            }}\n                        >\n                            Generuj graf\n                        </button>\n                    </div>\n                    <div\n                        className={\"top-panel__element\"}\n                    >\n                        <GraphDemoLoading\n                            state={this.state}\n                            changeValue={this.changeValue}\n                            generateGraph={this.generateGraph}\n                        />\n                        {(this.state.sequenceToAdd.length !== 0 && !this.state.inProgress) ? this.cancelDemoButton() : () => {\n                        }}\n                    </div>\n                    <div\n                        className={\"top-panel__element\"}\n                    >\n                        <label>\n                            <span style={{\n                                fontWeight: \"bold\"\n                            }}>Výběr algoritmu:\n                        </span>\n                            <select value={this.state.graphType} onChange={this.handleDropdownChange}>\n                                <option value={\"sparse\"}>Algoritmus pro řídký graf</option>\n                                <option value={\"dense\"}>Algoritmus pro hustý graf</option>\n                            </select>\n                        </label>\n                    </div>\n                </div>\n                <hr/>\n                <div\n                    className={\"graphLayout\"}\n                >\n                    <div\n                        className={\"graph\"}\n                    >\n                        <Graph\n                            graph={graph}\n                            options={options}\n                        />\n                    </div>\n                    <div\n                        className={\"pseudoCode\"}\n                    >\n                        {(this.state.graphType === \"sparse\") ?\n                            <SparseGraphPseudocode step={this.state.mainProcedureStep}/> :\n                            <DenseGraphPseudocode step={this.state.mainProcedureStep}/>}\n                    </div>\n                    <div\n                        className={\"procedure\"}\n                    >\n                        {(this.state.graphType === \"sparse\") ? <SparseGraphSubprocedure\n                            procedure={this.state.subprocedure}\n                            step={this.state.subprocedureStep}\n                        /> : <DenseGraphSubprocedure\n                            procedure={this.state.subprocedure}\n                            step={this.state.subprocedureStep}\n                        />}\n                    </div>\n                </div>\n                <hr/>\n                {(this.state.sequenceToAdd.length !== 0) ?\n                    this.DemoStep()\n                    : this.manualAdding()}\n            </div>\n\n        )\n    }\n}\n\nexport default NetworkGraph;\n","import React from 'react';\nimport './App.css';\nimport NetworkGraph from \"./components/NetworkGraph\";\n\nfunction App(props) {\n    return(\n        <div className={\"App\"}>\n            <NetworkGraph />\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Enables using JSX\n// NOTE: Wherewer we are using JSX, we need to import this\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Importing an external file\n//import MyInfo from \"./components/MyInfo\";\n\n// We can wrap JSX inside a Component (function), inside JSX we can input this function as <SomeFunction/>\n// NOTE: Each function can return only 1 JSX element! (possible workaround is to wrap it into <div> block)\n\n\n// The first argument is \"what do I want to render\", second tells \"where I want it to render\"\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}