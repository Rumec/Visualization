{"version":3,"sources":["components/SparseGraphPseudocode.js","components/SparseGraphSubprocedure.js","components/Chart1.js","App.js","reportWebVitals.js","index.js"],"names":["SparseGraphPseudocode","props","style","fontWeight","textIndent","backgroundColor","step","SparseGraphSubprocedurePseudocode","procedure","SparseGraphSubprocedure","NetworkGraph","sleepNow","sleepTime","Promise","r","setTimeout","visited","status","LESS_THAN_DELTA_EDGES","CYCLE_FOUND","MORE_THAN_DELTA_EDGES","state","subprocedure","subprocedureStep","mainProcedureStep","timeoutInput","timeout","followerList","e_in","delta","inProgress","addingEdge","from","to","numberOfVertices","nodes","edges","handleChange","bind","generateGraph","addEdge","changeVertex","colorEdge","colorGraphToDefault","changeProgress","addVisitedVertex","clearVisitedVertices","setTimeoutFromInput","addVertexToEin","setEinOfVertex","setSubprocedureStep","changeValue","id","newValue","this","setState","successor","predecessor","oldEin","push","vertex","toBeSet","prevState","a","event","target","name","value","parseInt","actualAngle","nodesArr","i","level","label","toString","title","color","x","Math","sin","y","cos","PI","slice","oldEdges","width","oldFollowerList","levelIncrease","map","node","index","findIndex","item","splice","length","tmpEdge","forward","fromVertex","toVertex","console","log","testOrdering","backwardSearch","actualStatus","forwardSearch","fromLevel","toLevel","start","w","includes","F","pop","actual","sqrt","pow","min","window","alert","some","edge","insertEdge","graph","events","selectNode","selectVertex","dragStart","className","options","layout","physics","enabled","height","type","onChange","onClick","mainProcedure","margin","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.353a7703.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SparseGraphPseudocode(props) {\n    return (\n        <div>\n                <h3>Hlavni procedura:</h3>\n\n            <div style={{fontWeight: \"bold\"}}>function VlozeniHrany(Graf, hrana)</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>v, w &#8592; hrana</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>B &#8592; &#8709;</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>dopredny &#8592; False</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> &#172;TestUsporadani(Graf, v, w) <a style={{fontWeight: \"bold\"}}>then</a></div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}>s &#8592; ZpetnyPruzkum(Graf, v, w, b)</div>\n            <div style={{textIndent: 30}}><a style={{fontWeight: \"bold\"}}>end if </a></div>\n            <div style={{textIndent: 30, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a>{\" s = CyklusNalezen \"}<a style={{fontWeight: \"bold\"}}>then</a></div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" True\"}</div>\n            <div style={{textIndent: 30, backgroundColor: (props.step === 6)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>else if</a> s = Neprekroceno &#8743; {\"Graf.k(v) < Graf.k(w) \"}<a style={{fontWeight: \"bold\"}}>then</a></div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}>Graf.k(w) &#8592; Graf.k(v)</div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}>Graf.in(w) &#8592; {}</div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}>dopredny &#8592; True</div>\n            <div style={{textIndent: 30, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>else if</a>{\" s = Prekroceno \"}<a style={{fontWeight: \"bold\"}}>then</a></div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>Graf.k(w) &#8592; Graf.k(v) + 1</div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>Graf.in(w) &#8592; &#8709;</div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>B &#8592; {\"{v}\"}</div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}>dopredny &#8592; True</div>\n            <div style={{textIndent: 30, fontWeight: \"bold\"}}>{\"end if\"}</div>\n            <div style={{textIndent: 30, backgroundColor: (props.step === 10)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> dopredny &#8743; DoprednyPruzkum(Graf, w, B) <a style={{fontWeight: \"bold\"}}>then</a></div>\n            <div style={{textIndent: 45, backgroundColor: (props.step === 11)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" True\"}</div>\n            <div style={{textIndent: 30, fontWeight: \"bold\"}}>{\"end if\"}</div>\n            <div style={{textIndent: 15, fontWeight: \"bold\"}}>{\"end if\"}</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 12)?\"yellow\" : \"white\"}}>{\"PridaniHrany(Graf, v, w)\"}</div>\n            <div style={{textIndent: 15, backgroundColor: (props.step === 12)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" False\"}</div>\n        </div>\n    )\n}\n\nexport default SparseGraphPseudocode;","import React from \"react\";\n\nfunction SparseGraphSubprocedurePseudocode(props) {\n    switch (props.procedure) {\n        case 1: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function TestUsporadani(Graf, v, w)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" Graf.k(v) < Graf.k(w)\"}</div>\n            </div>\n        );\n        case 2: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function ZpetnyPruzkum(Graf, start, w, B)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a>{\" start = w \"}<a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" CyklusNaleezen\"}</div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>end if</a></div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}>B &#8592; B &#8746; {\"{v}\"}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> Graf.in(start) = &#8709; &#8743; B.size() &#8805; Graf.delta <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" Prekroceno\"}</div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>end if</a></div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>foreach</a>{\" (predchudce, start)\"} &#8712; {\"Graf.in(start) \"}<a style={{fontWeight: \"bold\"}}>do</a></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> B.size() &#8805; Graf.delta <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" Prekroceno\"}</div>\n                <div style={{textIndent: 30, fontWeight: \"bold\"}}>{\"end if\"}</div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 10)?\"yellow\" : \"white\"}}>status &#8592; ZpetnyPruzkum(Graf, predchudce, w, B)</div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 11)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>switch</a>{\" status \"}<a style={{fontWeight: \"bold\"}}>do</a></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 12)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>case: </a>{\"CyklusNalezen: \"}<a style={{fontWeight: \"bold\"}}>return</a> CyklusNalezen</div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 13)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>case: </a>{\"Prekroceno: \"}<a style={{fontWeight: \"bold\"}}>return</a> Prekroceno</div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 14)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>default: </a>{}<a style={{fontWeight: \"bold\"}}>continue</a></div>\n                <div style={{textIndent: 30}}><a style={{fontWeight: \"bold\"}}>end switch</a>{}</div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>end for</a>{}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 15)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return </a>Neprekroceno</div>\n            </div>\n        );\n        case 3: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function DoprednyPruzkum(Graf, w, B)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>F &#8592; {\"{w}\"}</div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>while</a> F &#8800; &#8709; <a style={{fontWeight: \"bold\"}}>do</a></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}>aktualni &#8592; F.pop()</div>\n                <div style={{textIndent: 30}}><a style={{fontWeight: \"bold\"}}>foreach</a>{\" (a, n)\"} &#8712; {\"Graf.out(aktualni) \"}<a style={{fontWeight: \"bold\"}}>do</a></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> n &#8712; B <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return</a>{\" True\"}</div>\n                <div style={{textIndent: 45}}><a style={{fontWeight: \"bold\"}}>end if</a></div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 5)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> Graf.k(a) = Graf.k(n) <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 6)?\"yellow\" : \"white\"}}>Graf.in(n) &#8592; Graf.in(n) &#8746; {\"{(a, n)}\"}</div>\n                <div style={{textIndent: 45, backgroundColor: (props.step === 7)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>else if</a> Graf.k(a) > Graf.k(n) <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>Graf.k(n) &#8592; Graf.k(a)</div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>Graf.in(n) &#8592; {\"{(a, n)}\"}</div>\n                <div style={{textIndent: 60, backgroundColor: (props.step === 8)?\"yellow\" : \"white\"}}>F &#8592; F &#8746; {\"{n}\"}</div>\n                <div style={{textIndent: 45}}><a style={{fontWeight: \"bold\"}}>end if</a></div>\n                <div style={{textIndent: 30}}><a style={{fontWeight: \"bold\"}}>end for</a></div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>end while</a></div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 9)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>return </a>False</div>\n            </div>\n        );\n        case 4: return (\n            <div>\n                <div style={{fontWeight: \"bold\"}}>function PridaniHrany(Graf, v, w)</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 1)?\"yellow\" : \"white\"}}>Graf.out(v) &#8592; Graf.out(v) &#8746; {\"{(v, w)}\"}</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 2)?\"yellow\" : \"white\"}}><a style={{fontWeight: \"bold\"}}>if</a> Graf.k(v) = Graf.k(w) <a style={{fontWeight: \"bold\"}}>then</a></div>\n                <div style={{textIndent: 30, backgroundColor: (props.step === 3)?\"yellow\" : \"white\"}}>Graf.in(w) &#8592; Graf.in(w) &#8746; {\"{(v, w)}\"}</div>\n                <div style={{textIndent: 15}}><a style={{fontWeight: \"bold\"}}>end if</a></div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}>Graf.m &#8592; Graf.m + 1</div>\n                <div style={{textIndent: 15, backgroundColor: (props.step === 4)?\"yellow\" : \"white\"}}>Graf.delta &#8592; min{\"{\"}m<sup>1/2</sup>, n<sup>2/3</sup>{\"}\"}</div>\n            </div>\n        );\n        default: return(<div> </div>)\n    }\n\n}\n\nfunction SparseGraphSubprocedure(props) {\n    return(\n        <div>\n            <h3>Podprocedura:</h3>\n            <SparseGraphSubprocedurePseudocode\n                procedure={props.procedure}\n                step={props.step}\n            />\n        </div>\n    )\n}\n\nexport default SparseGraphSubprocedure;","import React from \"react\";\nimport Graph from \"react-graph-vis\";\nimport './graphStyle.css';\nimport SparseGraphPseudocode from \"./SparseGraphPseudocode\";\nimport SparseGraphSubprocedure from \"./SparseGraphSubprocedure\";\n//import DFS from \"./DFS\";\n//import SparseGraph from \"./SparseGraph\";\n\nconst RADIUS = 200;\n\nclass NetworkGraph extends React.Component {\n    constructor(props) {\n        super(props);\n        this.visited = [];\n        this.status = {\n            LESS_THAN_DELTA_EDGES: 0,\n            CYCLE_FOUND: 1,\n            MORE_THAN_DELTA_EDGES: 2\n        }\n\n        this.state = {\n            subprocedure: 0,\n            subprocedureStep: 0,\n            mainProcedureStep: 0,\n            timeoutInput: 500,\n            timeout: 500,\n            followerList: {},\n\n            e_in: {}, // JSON of lists in incoming edges\n            delta: 0,\n\n            inProgress: false,\n            visited: [],\n            addingEdge: false,\n            from: 0,\n            to: 0,\n            numberOfVertices: 0,\n            nodes: [],\n            edges: []\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.generateGraph = this.generateGraph.bind(this);\n        this.addEdge = this.addEdge.bind(this);\n        this.changeVertex = this.changeVertex.bind(this);\n        this.colorEdge = this.colorEdge.bind(this);\n        this.colorGraphToDefault = this.colorGraphToDefault.bind(this);\n        this.changeProgress = this.changeProgress.bind(this);\n        this.addVisitedVertex = this.addVisitedVertex.bind(this);\n        this.clearVisitedVertices = this.clearVisitedVertices.bind(this);\n        this.setTimeoutFromInput = this.setTimeoutFromInput.bind(this);\n        this.addVertexToEin = this.addVertexToEin.bind(this);\n        this.setEinOfVertex = this.setEinOfVertex.bind(this);\n        this.setSubprocedureStep = this.setSubprocedureStep.bind(this);\n        this.changeValue = this.changeValue.bind(this);\n    }\n\n    async changeValue(id, newValue) {\n        await this.setState({\n            [id]: newValue\n        })\n    }\n\n    async setSubprocedureStep(subprocedure, step) {\n        await this.setState({\n            subprocedure: subprocedure,\n            subprocedureStep: step\n        })\n    }\n\n    /**\n     * Adds a vertex to the e_in set\n     *\n     * @param successor - Vertex which e_in should be expanded\n     * @param predecessor - Vertex to be added\n     * @returns {Promise<void>}\n     */\n    async addVertexToEin(successor, predecessor) {\n        const oldEin = await this.state.e_in;\n        await oldEin[successor].push(predecessor);\n        await this.setState({\n            e_in: oldEin,\n        });\n    }\n\n    /**\n     * Sets the set of incoming edges to be the value given as parameter\n     *\n     * @param vertex - ID of vertex which e_in should be changed\n     * @param toBeSet - New value of e_in\n     * @returns {Promise<void>}\n     */\n    async setEinOfVertex(vertex, toBeSet) {\n        await this.setState(async prevState => {\n            prevState.e_in[vertex] = await toBeSet;\n            return prevState;\n        })\n    }\n\n    /**\n     * Handles changes of the controllers\n     *\n     * @param event - Object returned by event\n     */\n    handleChange(event) {\n        const {name, /*type, */ value/*, checked*/} = event.target;\n\n        //if (name === \"from\" || name === \"to\") {\n        this.setState({\n            [name]: parseInt(value)\n        })\n        //}\n\n        /*\n        (type === \"checkbox\") ? this.setState({[name]: checked})\n            : (name === \"addingEdge\") ? this.setState(prevState => {\n                return {\n                    addingEdge: !prevState.addingEdge\n                }\n            })\n            : this.setState({[name]: value});\n\n         */\n    }\n\n    /**\n     * Generates new graph, sets levels of all vertices to 1\n     *\n     * @returns {Promise<void>}\n     */\n    async generateGraph() {\n        let actualAngle = 0;\n        let nodesArr = [];\n        let followerList = {};\n        let e_in = {};\n        for (let i = 1; i <= this.state.numberOfVertices; ++i) {\n            await nodesArr.push({\n                id: i,\n                level: 1,\n                label: i.toString() + \", 1\",\n                title: i.toString(),\n                color: \"#34e1eb\",\n                x: RADIUS * Math.sin(actualAngle),\n                y: RADIUS * Math.cos(actualAngle)\n            });\n            followerList[i] = [];\n            e_in[i] = []; // initializing list of incoming edges\n            actualAngle += await (2 * Math.PI) / (this.state.numberOfVertices);\n        }\n        await this.setState({\n            mainProcedureStep: 0,\n            followerList: followerList,\n            e_in: e_in,\n            nodes: nodesArr,\n            edges: [],\n            delta: 0\n        });\n        //console.log(this.state.nodes);\n    }\n\n    /**\n     * Adds new edge to graph\n     *\n     * @returns {Promise<void>}\n     */\n    async addEdge() {\n        const from = parseInt(this.state.from);\n        const to = parseInt(this.state.to);\n\n        const oldEdges = await this.state.edges.slice();\n        await oldEdges.push({\n            from: from,\n            to: to,\n            color: \"black\",\n            width: 3\n        });\n\n        const oldFollowerList = await this.state.followerList;\n        await oldFollowerList[from].push(to);\n        await this.setState({\n            followerList: oldFollowerList,\n            edges: oldEdges,\n        });\n    }\n\n    DisplayAddingStatus() {\n        if (this.state.addingEdge && this.state.from === 0) {\n            return (\n                <p>Select starting vertex</p>\n            );\n        } else if (this.state.addingEdge && this.state.from !== 0) {\n            return (\n                <p>Select ending vertex</p>\n            );\n        } else {\n            return (<p>doing nothing</p>);\n        }\n    }\n\n    /**\n     * Action performed after node is selected via mouse click\n     *\n     * @param event - Event provided by mouse click\n     * @returns {Promise<void>}\n     */\n    async selectVertex(event) {\n        const {nodes} = event;\n\n        if (this.state.addingEdge && this.state.from !== 0) {\n            await this.setState({\n                to: nodes[0],\n                addingEdge: false\n            });\n            //await this.addEdge();\n        }\n        await this.setState({\n            from: nodes[0]\n        })\n\n    }\n\n    /**\n     * Stops program for specified amount of time\n     *\n     * @param sleepTime - Time to sleep\n     * @returns {Promise<unknown>}\n     */\n    sleepNow = (sleepTime) => new Promise((r) => setTimeout(r, sleepTime));\n\n    /**\n     * Changing parameters of vertex with given id to specified attributes\n     *\n     * @param id - ID of the node to be changed\n     * @param color - Color to be set\n     * @param levelIncrease - Value by which nodes level should be increased\n     * @returns {Promise<void>}\n     */\n    async changeVertex(id, color, levelIncrease) {\n        await this.setState(prevState => {\n            prevState.nodes = prevState.nodes.map(node => {\n                if (node.id === id) {\n                    return {\n                        id: id,\n                        level: node.level + levelIncrease,\n                        label: id.toString() + \", \" + (node.level + levelIncrease).toString(),\n                        title: node.title,\n                        color: color\n                    }\n                }\n                return node;\n            })\n            return {\n                nodes: prevState.nodes\n            };\n        })\n    }\n\n    /**\n     * Changes inProgress flag\n     */\n    changeProgress() {\n        this.setState(prevState => {\n            return {\n                inProgress: !prevState.inProgress\n            };\n        })\n    }\n\n    /**\n     * Adds vertex to set of visited vertices\n     *\n     * @param vertex - ID of vertex to be added\n     * @returns {Promise<void>}\n     */\n    async addVisitedVertex(vertex) {\n        await this.setState(prevState => {\n            prevState.visited.push(vertex);\n            return prevState;\n        })\n    }\n\n    /**\n     * Clears set of visited vertices\n     *\n     * @returns {Promise<void>}\n     */\n    async clearVisitedVertices() {\n        await this.setState({\n            visited: []\n        })\n    }\n\n    /**\n     * Colors given edge to red color (used for animation of searching through edges)\n     *\n     * @param from - Starting vertex of edge\n     * @param to - Ending vertex of edge\n     * @param color - Color of the edge\n     * @returns {Promise<void>}\n     */\n    async colorEdge(from, to, color) {\n        let oldEdges = await this.state.edges.slice();\n        const index = oldEdges.findIndex(item =>\n            item.from === from && item.to === to\n        );\n        await oldEdges.splice(index, 1);\n        await oldEdges.push({\n                from: from,\n                to: to,\n                color: color,\n                width: 3\n            }\n        )\n        await this.setState({\n            edges: oldEdges,\n        });\n    }\n\n    /**\n     * Colors whole graph back to default colors\n     *\n     * @returns {Promise<void>}\n     */\n    async colorGraphToDefault() {\n        /**\n         * Coloring all edges back to black\n         */\n        let oldEdges = await this.state.edges.slice();\n        for (let i = 0; i < oldEdges.length; ++i) {\n            let tmpEdge = {\n                from: oldEdges[0].from,\n                to: oldEdges[0].to,\n                color: \"black\",\n                width: 3\n            };\n\n            await oldEdges.splice(0, 1);\n            await oldEdges.push(tmpEdge);\n        }\n\n        await this.setState({\n            edges: oldEdges,\n        });\n\n        /**\n         * Coloring all vertices to default\n         */\n        await this.setState(prevState => {\n            prevState.nodes = prevState.nodes.map(node => {\n                node = {\n                    id: node.id,\n                    level: node.level,\n                    label: node.label,\n                    title: node.title,\n                    color: \"#34e1eb\"\n                }\n                return node;\n            })\n            return {\n                nodes: prevState.nodes\n            };\n        })\n    }\n\n    /**\n     * Sets value of pause using value in number input\n     */\n    setTimeoutFromInput() {\n        this.setState({\n            timeout: this.state.timeoutInput\n        })\n    }\n\n\n    /**************************/\n\n    /**\n     * Main procedure of algorithm for sparse graphs\n     *\n     * @returns {Promise<boolean>}\n     */\n    async insertEdge() {\n        let forward = false;\n        let actualStatus;\n\n        let fromVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === this.state.from)],\n            toVertex = this.state.nodes[this.state.nodes.findIndex(node => node.id === this.state.to)];\n\n        await this.changeVertex(fromVertex.id, \"orange\", 0);\n        await this.changeVertex(toVertex.id, \"orange\", 0);\n\n        await this.changeValue(\"mainProcedureStep\", 1);\n        await this.sleepNow(this.state.timeout);\n\n        // await console.log(\"fromVertex:\", fromVertex, \"toVertex:\", toVertex);\n        console.log(\"delta:\", this.state.delta);\n\n\n        if (!(await this.testOrdering(this.state.from, this.state.to))) {\n\n            /**\n             * Opravit v implementaci a BP!!!\n             */\n            actualStatus = await this.backwardSearch(fromVertex.id, toVertex.id);\n\n            if (actualStatus === this.status.CYCLE_FOUND) {\n                await this.changeValue(\"mainProcedureStep\", 4);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 5);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 0);\n\n                return true;\n            } else if (actualStatus === this.status.LESS_THAN_DELTA_EDGES && (toVertex.level < fromVertex.level)) {\n\n                await this.changeValue(\"mainProcedureStep\", 6);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 7);\n                await this.sleepNow(this.state.timeout);\n\n                await this.changeVertex(toVertex.id, \"orange\", (fromVertex.level - toVertex.level));\n                await this.setEinOfVertex(toVertex.id, []);\n                forward = true;\n            } else if (actualStatus === this.status.MORE_THAN_DELTA_EDGES) {\n\n                await this.changeValue(\"mainProcedureStep\", 8);\n                await this.sleepNow(this.state.timeout);\n                await this.changeValue(\"mainProcedureStep\", 9);\n                await this.sleepNow(this.state.timeout);\n\n                await this.changeVertex(toVertex.id, \"orange\", ((fromVertex.level - toVertex.level) + 1));\n                await this.setEinOfVertex(toVertex.id, []);\n                await this.clearVisitedVertices();\n                await this.addVisitedVertex(fromVertex.id);\n                forward = true;\n            }\n\n            if (forward) {\n                await this.changeValue(\"mainProcedureStep\", 10);\n                await this.setSubprocedureStep(3, 0);\n                await this.sleepNow(this.state.timeout);\n\n                actualStatus = (await this.forwardSearch(this.state.to));\n                if (actualStatus) {\n                    await this.changeValue(\"mainProcedureStep\", 11);\n                    await this.sleepNow(this.state.timeout);\n                    await this.changeValue(\"mainProcedureStep\", 0);\n\n                    return true;\n                }\n            }\n        }\n\n        await this.colorGraphToDefault();\n\n        await this.changeValue(\"mainProcedureStep\", 12);\n        await this.sleepNow(this.state.timeout);\n\n        await this.addingEdge(fromVertex.id, toVertex.id);\n        await this.clearVisitedVertices();\n        await this.changeValue(\"mainProcedureStep\", 0);\n        await this.setSubprocedureStep(0, 0);\n        return false;\n    }\n\n    async testOrdering(from, to) {\n        let fromLevel = this.state.nodes[this.state.nodes.findIndex(node => node.id === from)].level,\n            toLevel = this.state.nodes[this.state.nodes.findIndex(node => node.id === to)].level;\n\n        await this.changeValue(\"mainProcedureStep\", 2);\n        await this.setSubprocedureStep(1, 0);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(1, 1);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(0, 0);\n        return (fromLevel < toLevel);\n    }\n\n    async backwardSearch(start, w) {\n        await this.changeValue(\"mainProcedureStep\", 3);\n        await this.setSubprocedureStep(2, 0);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(2, 1);\n        await this.sleepNow(this.state.timeout);\n\n        if (start === w) {\n            await this.setSubprocedureStep(2, 2);\n            await this.sleepNow(this.state.timeout);\n\n            return this.status.CYCLE_FOUND;\n        }\n        await this.setSubprocedureStep(2, 3);\n        await this.sleepNow(this.state.timeout);\n\n        await this.addVisitedVertex(start);\n\n        /**\n         * Opravit v BP a implementaci! Dodělat animaci!\n         */\n        await this.setSubprocedureStep(2, 4);\n        await this.sleepNow(this.state.timeout);\n        if (this.state.e_in[start].length === 0 && this.state.visited.length >= this.state.delta + 1) {\n            await this.setSubprocedureStep(2, 5);\n            await this.sleepNow(this.state.timeout);\n\n            return this.status.MORE_THAN_DELTA_EDGES;\n        } /*else if (this.state.e_in[start].length === 0 && this.state.visited.length < this.state.delta + 1) {\n            await this.setSubprocedureStep(2, 6);\n            await this.sleepNow(this.state.timeout);\n            await this.setSubprocedureStep(2, 7);\n            await this.sleepNow(this.state.timeout);\n\n            return this.status.LESS_THAN_DELTA_EDGES;\n        }*/\n\n        for (let i = 0; i < this.state.e_in[start].length; ++i) {\n            let predecessor = await this.state.e_in[start][i];\n\n            await this.setSubprocedureStep(2, 8);\n            await this.sleepNow(this.state.timeout);\n\n            if (this.state.visited.length >= this.state.delta + 1) {\n\n                await this.setSubprocedureStep(2, 9);\n                await this.sleepNow(this.state.timeout);\n                await this.setSubprocedureStep(0, 0);\n\n                return this.status.MORE_THAN_DELTA_EDGES;\n            }\n\n            if (this.state.visited.includes(predecessor)) {\n                continue;\n            }\n\n            // Coloring backward-searched edges\n            await this.colorEdge(predecessor, start, \"red\");\n            await this.setSubprocedureStep(2, 10);\n            await this.sleepNow(this.state.timeout);\n            let actualStatus = await this.backwardSearch(predecessor, w);\n\n            await this.setSubprocedureStep(2, 11);\n            await this.sleepNow(this.state.timeout);\n            if (actualStatus === this.status.CYCLE_FOUND || actualStatus === this.status.MORE_THAN_DELTA_EDGES) {\n                if (actualStatus === this.status.CYCLE_FOUND) {\n                    await this.setSubprocedureStep(2, 12);\n                    await this.sleepNow(this.state.timeout);\n                } else if (actualStatus === this.status.MORE_THAN_DELTA_EDGES) {\n                    await this.setSubprocedureStep(2, 13);\n                    await this.sleepNow(this.state.timeout);\n                }\n                await this.setSubprocedureStep(0, 0);\n                return actualStatus;\n            }\n            await this.setSubprocedureStep(2, 14);\n            await this.sleepNow(this.state.timeout);\n        }\n        await this.setSubprocedureStep(2, 15);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(0, 0);\n        return this.status.LESS_THAN_DELTA_EDGES;\n    }\n\n    async forwardSearch(w) {\n        // Simulation of set (JS set is not very smart)\n        await this.setSubprocedureStep(3, 1);\n        await this.sleepNow(this.state.timeout);\n\n        let F = [w];\n\n        while (F.length) {\n            await this.setSubprocedureStep(3, 2);\n            await this.sleepNow(this.state.timeout);\n\n            let actual = await F.pop();\n            actual = this.state.nodes[this.state.nodes.findIndex(node => node.id === actual)];\n\n            for (let i = 0; i < this.state.followerList[actual.id].length; ++i) {\n\n                let successor = await this.state.followerList[actual.id][i];\n                successor = this.state.nodes[this.state.nodes.findIndex(node => node.id === successor)];\n\n                // Animation\n                //console.log(\"Searching forward edge: (\", actual.id, \", \", successor.id, \")\");\n                await this.colorEdge(actual.id, successor.id, \"blue\");\n                await this.setSubprocedureStep(3, 3);\n                await this.sleepNow(this.state.timeout);\n\n                if (this.state.visited.includes(successor.id)) {\n                    await this.setSubprocedureStep(3, 4);\n                    await this.sleepNow(this.state.timeout);\n                    await this.setSubprocedureStep(0, 0);\n\n                    return true;\n                }\n\n                if (actual.level === successor.level) {\n                    await this.setSubprocedureStep(3, 5);\n                    await this.sleepNow(this.state.timeout);\n                    await this.setSubprocedureStep(3, 6);\n                    await this.sleepNow(this.state.timeout);\n\n                    await this.addVertexToEin(successor.id, actual.id);\n                } else if (actual.level > successor.level) {\n                    await this.setSubprocedureStep(3, 7);\n                    await this.sleepNow(this.state.timeout);\n                    await this.setSubprocedureStep(3, 8);\n                    await this.sleepNow(this.state.timeout);\n\n                    await this.changeVertex(successor.id, successor.color, (actual.level - successor.level));\n                    await this.setEinOfVertex(successor.id, [actual.id]);\n                    await F.push(successor.id);\n                }\n            }\n        }\n        await this.setSubprocedureStep(3, 9);\n        await this.sleepNow(this.state.timeout);\n        await this.setSubprocedureStep(0, 0);\n\n        return false;\n    }\n\n    async addingEdge(from, to) {\n\n        from = this.state.nodes[this.state.nodes.findIndex(node => node.id === from)];\n        to = this.state.nodes[this.state.nodes.findIndex(node => node.id === to)];\n\n        await this.setSubprocedureStep(4, 1);\n        await this.sleepNow(this.state.timeout);\n\n        await this.addEdge();\n\n        if (from.level === to.level) {\n            await this.setSubprocedureStep(4, 2);\n            await this.sleepNow(this.state.timeout);\n            await this.setSubprocedureStep(4, 3);\n            await this.sleepNow(this.state.timeout);\n\n            await this.addVertexToEin(to.id, from.id);\n        }\n        await this.setSubprocedureStep(4, 4);\n        await this.sleepNow(this.state.timeout);\n\n        await this.changeValue(\"delta\", await Math.min(await Math.sqrt(this.state.edges.length),\n            await Math.pow(this.state.nodes.length, (2 / 3))));\n\n        await this.setSubprocedureStep(0, 0);\n    }\n\n    async mainProcedure() {\n        if (!this.state.inProgress) {\n            const from = parseInt(this.state.from);\n            const to = parseInt(this.state.to);\n\n            await this.changeProgress();\n\n            if (to === from) {\n                window.alert(\"Cannot create loop\");\n            } else if (this.state.edges.some(edge => edge.from === from && edge.to === to)) {\n                window.alert(\"Edge already exists!\");\n            } else if (from > this.state.numberOfVertices || to > this.state.numberOfVertices ||\n                from < 1 || to < 1) {\n                await window.alert(\"Chosen vertices do not exist in the graph!\");\n            } else if (await this.insertEdge()) {\n                // Adding edge which creates cycle (green color)\n                await this.addEdge();\n                await this.colorEdge(this.state.from, this.state.to, \"green\");\n\n                await console.log(\"cycle\");\n                await window.alert(\"Cycle detected!\");\n            }\n\n            await this.changeProgress();\n        }\n\n    }\n\n    /**************************/\n\n    render() {\n        const graph = {nodes: this.state.nodes, edges: this.state.edges};\n\n        const options = {\n            layout: {\n                //hierarchical: true\n            },\n            edges: {\n                color: \"#000000\"\n            },\n            physics: {\n                enabled: false\n            },\n            height: \"500px\",\n        };\n\n        const events = {\n            // arrow function can access scope of whole component class\n            selectNode: async (event) => {\n                await this.selectVertex(event)\n            },\n\n            dragStart: async (event) => {\n                await this.selectVertex(event)\n            }\n        };\n        return (\n            <div>\n                <div\n                    className={\"graphLayout\"}\n                >\n                    <div\n                        className={\"graphBox\"}\n                    >\n                        <Graph\n                            graph={graph}\n                            options={options}\n                            events={events}\n                        />\n                    </div>\n\n                    <div\n                        className={\"pseudoCode\"}\n                    >\n                        <SparseGraphPseudocode step={this.state.mainProcedureStep}/>\n                    </div>\n\n                    <div\n                        className={\"procedure\"}\n                    >\n                        <SparseGraphSubprocedure\n                            procedure={this.state.subprocedure}\n                            step={this.state.subprocedureStep}\n                        />\n                    </div>\n                </div>\n                <br></br>\n                <div\n                    className={\"graphLayout\"}\n                >\n                    <div>\n                        <input\n                            name={\"numberOfVertices\"}\n                            type={\"number\"}\n                            value={this.state.numberOfVertices}\n                            onChange={this.handleChange}\n                        />\n                        <button\n                            onClick={(!this.state.inProgress) ? this.generateGraph : () => {\n                            }}\n                        >\n                            Generuj graf\n                        </button>\n\n                        <br/>\n\n\n                        <p>Přidávám hranu z {this.state.from} do {this.state.to}</p>\n\n\n                        <br/>\n\n                        <div>\n                            <label>\n                                <input\n                                    name={\"from\"}\n                                    type={\"number\"}\n                                    value={this.state.from}\n                                    onChange={(!this.state.inProgress) ? this.handleChange : () => {\n                                    }}\n                                />\n                                Výchozí vrchol\n                            </label>\n\n                            <label>\n                                <input\n                                    name={\"to\"}\n                                    type={\"number\"}\n                                    value={this.state.to}\n                                    onChange={(!this.state.inProgress) ? this.handleChange : () => {\n                                    }}\n                                />\n                                Cílový vrchol\n                            </label>\n\n                            <button\n                                onClick={() => {\n                                    this.mainProcedure();\n                                }}\n                            >\n                                Vlož hranu\n                            </button>\n                        </div>\n\n\n                        <br/>\n                        <br/>\n                        <label>\n                            <input\n                                name={\"timeoutInput\"}\n                                type={\"number\"}\n                                value={this.state.timeoutInput}\n                                onChange={this.handleChange}\n                            />\n                            Délka kroku\n                        </label>\n                        <button\n                            onClick={this.setTimeoutFromInput}\n                        >\n                            Nastav délku kroku\n                        </button>\n                    </div>\n                    <div>\n                        <h2 style={{margin: 40}}>Delta= {this.state.delta}</h2>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default NetworkGraph;\n\n\n/*\n                <DFS\n                    state={this.state}\n                    changeProgress={this.changeProgress}\n                    colorGraphToDefault={this.colorGraphToDefault}\n                    sleepNow={this.sleepNow}\n                    visited={this.visited}\n                    colorEdgeToRed={this.colorEdgeToRed}\n                    changeVertex={this.changeVertex}\n                    addVisitedVertices={this.addVisitedVertex}\n                    clearVisitedVertices={this.clearVisitedVertices}\n                />\n\n                <button\n                    name={\"addingEdge\"}\n                    onClick={(!this.state.inProgress) ? this.handleChange : () => {\n                    }}\n                >\n                    Add edge with mouse\n                </button>\n\n                {this.DisplayAddingStatus()}\n\n                <button\n                    name={\"addingEdge\"}\n                    onClick={(!this.state.inProgress) ? this.handleChange : () => {\n                    }}\n                >\n                    Add edge with mouse\n                </button>\n\n                 <button\n                    onClick={(!this.state.inProgress) ? this.addEdge : () => {\n                    }}\n                >\n                    Add edge\n                </button>\n\n\n\n                <SparseGraph\n                    state={this.state}\n                    sleepNow={this.sleepNow}\n                    handleChange={this.handleChange}\n                    colorGraphToDefault={this.colorGraphToDefault}\n                    colorEdgeToRed={this.colorEdgeToRed}\n                    changeProgress={this.changeProgress}\n                    changeVertex={this.changeVertex}\n                    addVisitedVertex={this.addVisitedVertex}\n                    clearVisitedVertices={this.clearVisitedVertices}\n                    addVertexToEin={this.addVertexToEin}\n                    setEinOfVertex={this.setEinOfVertex}\n                    addEdge={this.addEdge}\n                    incrementM={this.incrementM}\n                    setDelta={this.setDelta}\n                />\n */","import React from 'react';\nimport './App.css';\nimport NetworkGraph from \"./components/Chart1\";\n\n// NOTE: CSS styling using 'className' needs to be in react elements, not components\n// NOTE: each time I write a method using setState(), I need to bind it to the class inside constructor!!\n//          like this: this.handleIncreaseClick = this.handleIncreaseClick.bind(this);\n\n\n// NOTE: Formik library - complete forms for React\n\nfunction App(props) {\n    return(\n        <div className={\"App\"}>\n            <header className={\"App-header\"}>\n                <NetworkGraph />\n            </header>\n        </div>\n    )\n}\n\nexport default App;\n\n/*\n    class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            isFriendly: false,\n            gender: \"\",\n            favouriteColor: \"Red\"\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        // To avoid some nasty bugs we use this\n        const {type, checked, name, value} = event.target;\n        // If I want to use string from variable as a key, I need to wrap it in square brackets\n        (type === \"checkbox\") ? this.setState({[name]: checked}) : this.setState({[name]: value});\n    }\n\n    render() {\n        return (\n            <form className=\"forms\">\n                <input\n                    type=\"text\"\n                    value={this.state.firstName}\n                    name=\"firstName\"\n                    placeholder=\"First Name\"\n                    onChange={this.handleChange}\n                />\n                <input\n                    type=\"text\"\n                    value={this.state.lastName}\n                    name=\"lastName\"\n                    placeholder=\"Last Name\"\n                    onChange={this.handleChange}\n                />\n                <textarea\n                    className=\"inputWindow\"\n                    placeholder=\"Some placeholder\"\n                    onChange={this.handleChange}\n                />\n\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        name={\"isFriendly\"}\n                        checked={this.state.isFriendly}\n                        onChange={this.handleChange}\n                    />\n                    Is friendly?\n                </label>\n\n                <br/>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name={\"gender\"}\n                        value={\"male\"}\n                        checked={this.state.gender === \"male\"}\n                        onChange={this.handleChange}\n                    />\n                    male\n                </label>\n                <br/>\n                <label>\n                    <input\n                        type=\"radio\"\n                        name={\"gender\"}\n                        value={\"female\"}\n                        checked={this.state.gender === \"female\"}\n                        onChange={this.handleChange}\n                    />\n                    female\n                </label>\n\n                <select\n                    value={this.state.favouriteColor}\n                    name={\"favouriteColor\"}\n                    onChange={this.handleChange}\n                >\n                    <option value={\"Red\"}>Red</option>\n                    <option value={\"Gay\"}>Gay</option>\n                    <option value={\"Green\"}>Green</option>\n                </select>\n\n                <h2>{this.state.favouriteColor}</h2>\n            </form>\n        )\n    }\n}\n */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Enables using JSX\n// NOTE: Wherewer we are using JSX, we need to import this\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Importing an external file\n//import MyInfo from \"./components/MyInfo\";\n\n// We can wrap JSX inside a Component (function), inside JSX we can input this function as <SomeFunction/>\n// NOTE: Each function can return only 1 JSX element! (possible workaround is to wrap it into <div> block)\n\n\n// The first argument is \"what do I want to render\", second tells \"where I want it to render\"\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}